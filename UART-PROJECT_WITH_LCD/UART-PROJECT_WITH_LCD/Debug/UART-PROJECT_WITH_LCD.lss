
UART-PROJECT_WITH_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000492  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069b  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a8  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036d  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000376  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f9  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 0d 02 	jmp	0x41a	; 0x41a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "UART.h"
#include "Config_UART.h"


int main(void)
{  UART_Inti();
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	0e 94 48 00 	call	0x90	; 0x90 <UART_Inti>

    /* Replace with your application code */
    while (1) 
    { UART_Transmit('c');
  88:	83 e6       	ldi	r24, 0x63	; 99
  8a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <UART_Transmit>
    }
  8e:	fc cf       	rjmp	.-8      	; 0x88 <main+0xc>

00000090 <UART_Inti>:
 */ 
#include "UART.h"
#include "Config_UART.h"
UART_Config_S Mine;
void UART_Inti()
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	

	UBRRL = Mine.BaudRate;
  98:	89 e2       	ldi	r24, 0x29	; 41
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  a0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	Mine.DataSize = DATASIZE;
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_edata+0x4>
	Mine.No_StopBits = NO_STOPBITS ;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_edata+0x2>
	Mine.SpeedMode = SPEEDMODE;
  b4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <_edata+0x5>
	Mine.ParityMode = PARITYMODE ;
  b8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_edata+0x3>
	Mine.BaudRate = (FOSC/(BAUDRATE)/16)-1;
  bc:	87 e6       	ldi	r24, 0x67	; 103
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	UBRRH = (Mine.BaudRate&0xf0)>>8;
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
	UBRRL =Mine.BaudRate;
  d0:	89 e2       	ldi	r24, 0x29	; 41
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
  d8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	if (Mine.No_StopBits==ONE){
  e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_edata+0x2>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	99 f4       	brne	.+38     	; 0x10e <UART_Inti+0x7e>
	Set_Bit(UCSRC,URSEL);
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	20 e4       	ldi	r18, 0x40	; 64
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	20 68       	ori	r18, 0x80	; 128
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18

	Clear_Bit(UCSRC,USBS);
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	20 e4       	ldi	r18, 0x40	; 64
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	27 7f       	andi	r18, 0xF7	; 247
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	12 c0       	rjmp	.+36     	; 0x132 <UART_Inti+0xa2>
	}
	else
	{
	Set_Bit(UCSRC,URSEL);	
 10e:	80 e4       	ldi	r24, 0x40	; 64
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	20 e4       	ldi	r18, 0x40	; 64
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	20 68       	ori	r18, 0x80	; 128
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
	Set_Bit(UCSRC,USBS);
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	20 e4       	ldi	r18, 0x40	; 64
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	28 60       	ori	r18, 0x08	; 8
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	}
	switch(Mine.ParityMode)
 132:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_edata+0x3>
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	91 05       	cpc	r25, r1
 13e:	81 f0       	breq	.+32     	; 0x160 <UART_Inti+0xd0>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	91 05       	cpc	r25, r1
 144:	49 f1       	breq	.+82     	; 0x198 <UART_Inti+0x108>
 146:	89 2b       	or	r24, r25
 148:	09 f0       	breq	.+2      	; 0x14c <UART_Inti+0xbc>
 14a:	42 c0       	rjmp	.+132    	; 0x1d0 <UART_Inti+0x140>
	{
		case 0 :
		
		Set_Bit(UCSRC,URSEL);
 14c:	80 e4       	ldi	r24, 0x40	; 64
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	20 e4       	ldi	r18, 0x40	; 64
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	20 68       	ori	r18, 0x80	; 128
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
		/*Clear_Bit(UCSRC,UPM0);
		Clear_Bit(UCSRC,UPM1);*/
		break;
 15e:	38 c0       	rjmp	.+112    	; 0x1d0 <UART_Inti+0x140>
		case 1 :
		Set_Bit(UCSRC,URSEL);
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	20 e4       	ldi	r18, 0x40	; 64
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	20 68       	ori	r18, 0x80	; 128
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
		Clear_Bit(UCSRC,UPM0);
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	20 e4       	ldi	r18, 0x40	; 64
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	2f 7e       	andi	r18, 0xEF	; 239
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UPM1);
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	20 e4       	ldi	r18, 0x40	; 64
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	20 62       	ori	r18, 0x20	; 32
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
		break;
 196:	1c c0       	rjmp	.+56     	; 0x1d0 <UART_Inti+0x140>
		case 2 :
		Set_Bit(UCSRC,URSEL);
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	20 e4       	ldi	r18, 0x40	; 64
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	20 68       	ori	r18, 0x80	; 128
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18

		Clear_Bit(UCSRC,UPM1);
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	20 e4       	ldi	r18, 0x40	; 64
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	2f 7d       	andi	r18, 0xDF	; 223
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UPM0);
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	20 e4       	ldi	r18, 0x40	; 64
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	20 61       	ori	r18, 0x10	; 16
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
		break;
 1ce:	00 00       	nop
	}
	
	/*SPEED*/

	if(Mine.SpeedMode == LOW)
 1d0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <_edata+0x5>
 1d4:	88 23       	and	r24, r24
 1d6:	51 f4       	brne	.+20     	; 0x1ec <UART_Inti+0x15c>
	{
		Clear_Bit(UCSRA,U2X);
 1d8:	8b e2       	ldi	r24, 0x2B	; 43
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	2b e2       	ldi	r18, 0x2B	; 43
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	2d 7f       	andi	r18, 0xFD	; 253
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <UART_Inti+0x16e>
	}

	else
	{
		Set_Bit(UCSRA,U2X);
 1ec:	8b e2       	ldi	r24, 0x2B	; 43
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	2b e2       	ldi	r18, 0x2B	; 43
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	22 60       	ori	r18, 0x02	; 2
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	}


	/*SIZE*/

	switch(Mine.DataSize)
 1fe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_edata+0x4>
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	87 30       	cpi	r24, 0x07	; 7
 208:	91 05       	cpc	r25, r1
 20a:	09 f4       	brne	.+2      	; 0x20e <UART_Inti+0x17e>
 20c:	5b c0       	rjmp	.+182    	; 0x2c4 <UART_Inti+0x234>
 20e:	88 30       	cpi	r24, 0x08	; 8
 210:	91 05       	cpc	r25, r1
 212:	34 f4       	brge	.+12     	; 0x220 <UART_Inti+0x190>
 214:	85 30       	cpi	r24, 0x05	; 5
 216:	91 05       	cpc	r25, r1
 218:	59 f0       	breq	.+22     	; 0x230 <UART_Inti+0x1a0>
 21a:	06 97       	sbiw	r24, 0x06	; 6
 21c:	71 f1       	breq	.+92     	; 0x27a <UART_Inti+0x1ea>
 21e:	a6 c0       	rjmp	.+332    	; 0x36c <UART_Inti+0x2dc>
 220:	88 30       	cpi	r24, 0x08	; 8
 222:	91 05       	cpc	r25, r1
 224:	09 f4       	brne	.+2      	; 0x228 <UART_Inti+0x198>
 226:	73 c0       	rjmp	.+230    	; 0x30e <UART_Inti+0x27e>
 228:	09 97       	sbiw	r24, 0x09	; 9
 22a:	09 f4       	brne	.+2      	; 0x22e <UART_Inti+0x19e>
 22c:	7a c0       	rjmp	.+244    	; 0x322 <UART_Inti+0x292>
 22e:	9e c0       	rjmp	.+316    	; 0x36c <UART_Inti+0x2dc>
	{
		case 5 :
		Set_Bit(UCSRC,URSEL);
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	20 e4       	ldi	r18, 0x40	; 64
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	f9 01       	movw	r30, r18
 23a:	20 81       	ld	r18, Z
 23c:	20 68       	ori	r18, 0x80	; 128
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
		Clear_Bit(UCSRC,UCSZ1);
 242:	80 e4       	ldi	r24, 0x40	; 64
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	20 e4       	ldi	r18, 0x40	; 64
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	20 81       	ld	r18, Z
 24e:	2b 7f       	andi	r18, 0xFB	; 251
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
		Clear_Bit(UCSRC,UCSZ0);
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	20 e4       	ldi	r18, 0x40	; 64
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	2d 7f       	andi	r18, 0xFD	; 253
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
		Clear_Bit(UCSRB,UCSZ2);
 266:	8a e2       	ldi	r24, 0x2A	; 42
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2a e2       	ldi	r18, 0x2A	; 42
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	2b 7f       	andi	r18, 0xFB	; 251
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
break;
 278:	9e c0       	rjmp	.+316    	; 0x3b6 <UART_Inti+0x326>
		case 6 :
		Set_Bit(UCSRC,URSEL);
 27a:	80 e4       	ldi	r24, 0x40	; 64
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	20 e4       	ldi	r18, 0x40	; 64
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	20 68       	ori	r18, 0x80	; 128
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
		Clear_Bit(UCSRC,UCSZ1);
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	20 e4       	ldi	r18, 0x40	; 64
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	f9 01       	movw	r30, r18
 296:	20 81       	ld	r18, Z
 298:	2b 7f       	andi	r18, 0xFB	; 251
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UCSZ0);
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	20 e4       	ldi	r18, 0x40	; 64
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	f9 01       	movw	r30, r18
 2a8:	20 81       	ld	r18, Z
 2aa:	22 60       	ori	r18, 0x02	; 2
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
		Clear_Bit(UCSRB,UCSZ2);
 2b0:	8a e2       	ldi	r24, 0x2A	; 42
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	2a e2       	ldi	r18, 0x2A	; 42
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	2b 7f       	andi	r18, 0xFB	; 251
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
break;
 2c2:	79 c0       	rjmp	.+242    	; 0x3b6 <UART_Inti+0x326>
		case 7 :
		Set_Bit(UCSRC,URSEL);
 2c4:	80 e4       	ldi	r24, 0x40	; 64
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	20 e4       	ldi	r18, 0x40	; 64
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	20 81       	ld	r18, Z
 2d0:	20 68       	ori	r18, 0x80	; 128
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UCSZ1);
 2d6:	80 e4       	ldi	r24, 0x40	; 64
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	20 e4       	ldi	r18, 0x40	; 64
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	24 60       	ori	r18, 0x04	; 4
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
		Clear_Bit(UCSRC,UCSZ0);
 2e8:	80 e4       	ldi	r24, 0x40	; 64
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	20 e4       	ldi	r18, 0x40	; 64
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	20 81       	ld	r18, Z
 2f4:	2d 7f       	andi	r18, 0xFD	; 253
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
		Clear_Bit(UCSRB,UCSZ2);
 2fa:	8a e2       	ldi	r24, 0x2A	; 42
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	2a e2       	ldi	r18, 0x2A	; 42
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	2b 7f       	andi	r18, 0xFB	; 251
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
break;
 30c:	54 c0       	rjmp	.+168    	; 0x3b6 <UART_Inti+0x326>
		case 8 :
		UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 30e:	80 e4       	ldi	r24, 0x40	; 64
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	20 e4       	ldi	r18, 0x40	; 64
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	f9 01       	movw	r30, r18
 318:	20 81       	ld	r18, Z
 31a:	26 68       	ori	r18, 0x86	; 134
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
	/*	Set_Bit(UCSRC,URSEL);
		Set_Bit(UCSRC,UCSZ1);
		Set_Bit(UCSRC,UCSZ0);*/
break;
 320:	4a c0       	rjmp	.+148    	; 0x3b6 <UART_Inti+0x326>

		case 9 :
		Set_Bit(UCSRC,URSEL);
 322:	80 e4       	ldi	r24, 0x40	; 64
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	20 e4       	ldi	r18, 0x40	; 64
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	f9 01       	movw	r30, r18
 32c:	20 81       	ld	r18, Z
 32e:	20 68       	ori	r18, 0x80	; 128
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UCSZ1);
 334:	80 e4       	ldi	r24, 0x40	; 64
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	20 e4       	ldi	r18, 0x40	; 64
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	f9 01       	movw	r30, r18
 33e:	20 81       	ld	r18, Z
 340:	24 60       	ori	r18, 0x04	; 4
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UCSZ0);
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	20 e4       	ldi	r18, 0x40	; 64
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	22 60       	ori	r18, 0x02	; 2
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
		Set_Bit(UCSRB,UCSZ2);
 358:	8a e2       	ldi	r24, 0x2A	; 42
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	2a e2       	ldi	r18, 0x2A	; 42
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	f9 01       	movw	r30, r18
 362:	20 81       	ld	r18, Z
 364:	24 60       	ori	r18, 0x04	; 4
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18
break;
 36a:	25 c0       	rjmp	.+74     	; 0x3b6 <UART_Inti+0x326>
		default :
		Set_Bit(UCSRC,URSEL);
 36c:	80 e4       	ldi	r24, 0x40	; 64
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	20 e4       	ldi	r18, 0x40	; 64
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	f9 01       	movw	r30, r18
 376:	20 81       	ld	r18, Z
 378:	20 68       	ori	r18, 0x80	; 128
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UCSZ1);
 37e:	80 e4       	ldi	r24, 0x40	; 64
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	20 e4       	ldi	r18, 0x40	; 64
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	f9 01       	movw	r30, r18
 388:	20 81       	ld	r18, Z
 38a:	24 60       	ori	r18, 0x04	; 4
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
		Set_Bit(UCSRC,UCSZ0);
 390:	80 e4       	ldi	r24, 0x40	; 64
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	20 e4       	ldi	r18, 0x40	; 64
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	22 60       	ori	r18, 0x02	; 2
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
		Clear_Bit(UCSRB,UCSZ2);
 3a2:	8a e2       	ldi	r24, 0x2A	; 42
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	2a e2       	ldi	r18, 0x2A	; 42
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	2b 7f       	andi	r18, 0xFB	; 251
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
break;
 3b4:	00 00       	nop
	}

		
	UCSRB |= (1<<RXEN) | (1<<TXEN);
 3b6:	8a e2       	ldi	r24, 0x2A	; 42
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	2a e2       	ldi	r18, 0x2A	; 42
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	28 61       	ori	r18, 0x18	; 24
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18

}
 3c8:	00 00       	nop
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <UART_Transmit>:

void UART_Transmit(uint8 Data)
{ 		
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	1f 92       	push	r1
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	89 83       	std	Y+1, r24	; 0x01

	  while(!Get_Bit(UCSRA,UDRE));
 3dc:	00 00       	nop
 3de:	8b e2       	ldi	r24, 0x2B	; 43
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	80 72       	andi	r24, 0x20	; 32
 3ec:	99 27       	eor	r25, r25
 3ee:	95 95       	asr	r25
 3f0:	87 95       	ror	r24
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	95 95       	asr	r25
 400:	87 95       	ror	r24
 402:	89 2b       	or	r24, r25
 404:	61 f3       	breq	.-40     	; 0x3de <UART_Transmit+0xe>

	UDR = Data;
 406:	8c e2       	ldi	r24, 0x2C	; 44
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	29 81       	ldd	r18, Y+1	; 0x01
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
}
 410:	00 00       	nop
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>


iNTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d94  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000e08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ed  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000763  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000835  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000028bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000410  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000407  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  74:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	{
		return (Get_Bit(PIND,(PinNum-24)));
		
	} 
 
 }
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_WritePin+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	b0 f1       	brcs	.+108    	; 0xfc <DIO_WritePin+0x80>
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	80 31       	cpi	r24, 0x10	; 16
  94:	98 f5       	brcc	.+102    	; 0xfc <DIO_WritePin+0x80>
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	88 23       	and	r24, r24
  9a:	c1 f0       	breq	.+48     	; 0xcc <DIO_WritePin+0x50>
  9c:	88 e3       	ldi	r24, 0x38	; 56
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	28 e3       	ldi	r18, 0x38	; 56
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	20 81       	ld	r18, Z
  a8:	62 2f       	mov	r22, r18
  aa:	29 81       	ldd	r18, Y+1	; 0x01
  ac:	22 2f       	mov	r18, r18
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	a9 01       	movw	r20, r18
  b2:	48 50       	subi	r20, 0x08	; 8
  b4:	51 09       	sbc	r21, r1
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_WritePin+0x44>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	4a 95       	dec	r20
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_WritePin+0x40>
  c4:	26 2b       	or	r18, r22
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
  ca:	18 c0       	rjmp	.+48     	; 0xfc <DIO_WritePin+0x80>
  cc:	88 e3       	ldi	r24, 0x38	; 56
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	28 e3       	ldi	r18, 0x38	; 56
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	20 81       	ld	r18, Z
  d8:	62 2f       	mov	r22, r18
  da:	29 81       	ldd	r18, Y+1	; 0x01
  dc:	22 2f       	mov	r18, r18
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	a9 01       	movw	r20, r18
  e2:	48 50       	subi	r20, 0x08	; 8
  e4:	51 09       	sbc	r21, r1
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_WritePin+0x74>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	4a 95       	dec	r20
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_WritePin+0x70>
  f4:	20 95       	com	r18
  f6:	26 23       	and	r18, r22
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	89 30       	cpi	r24, 0x09	; 9
 100:	68 f5       	brcc	.+90     	; 0x15c <DIO_WritePin+0xe0>
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	88 23       	and	r24, r24
 106:	a9 f0       	breq	.+42     	; 0x132 <DIO_WritePin+0xb6>
 108:	8b e3       	ldi	r24, 0x3B	; 59
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	2b e3       	ldi	r18, 0x3B	; 59
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	f9 01       	movw	r30, r18
 112:	20 81       	ld	r18, Z
 114:	62 2f       	mov	r22, r18
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	42 2f       	mov	r20, r18
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_WritePin+0xaa>
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	4a 95       	dec	r20
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_WritePin+0xa6>
 12a:	26 2b       	or	r18, r22
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	15 c0       	rjmp	.+42     	; 0x15c <DIO_WritePin+0xe0>
 132:	8b e3       	ldi	r24, 0x3B	; 59
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	2b e3       	ldi	r18, 0x3B	; 59
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	62 2f       	mov	r22, r18
 140:	29 81       	ldd	r18, Y+1	; 0x01
 142:	42 2f       	mov	r20, r18
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_WritePin+0xd4>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	4a 95       	dec	r20
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_WritePin+0xd0>
 154:	20 95       	com	r18
 156:	26 23       	and	r18, r22
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	80 31       	cpi	r24, 0x10	; 16
 160:	b0 f1       	brcs	.+108    	; 0x1ce <DIO_WritePin+0x152>
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	88 31       	cpi	r24, 0x18	; 24
 166:	98 f5       	brcc	.+102    	; 0x1ce <DIO_WritePin+0x152>
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	88 23       	and	r24, r24
 16c:	c1 f0       	breq	.+48     	; 0x19e <DIO_WritePin+0x122>
 16e:	85 e3       	ldi	r24, 0x35	; 53
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	25 e3       	ldi	r18, 0x35	; 53
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	62 2f       	mov	r22, r18
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	22 2f       	mov	r18, r18
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	a9 01       	movw	r20, r18
 184:	40 51       	subi	r20, 0x10	; 16
 186:	51 09       	sbc	r21, r1
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_WritePin+0x116>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	4a 95       	dec	r20
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_WritePin+0x112>
 196:	26 2b       	or	r18, r22
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	18 c0       	rjmp	.+48     	; 0x1ce <DIO_WritePin+0x152>
 19e:	85 e3       	ldi	r24, 0x35	; 53
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	25 e3       	ldi	r18, 0x35	; 53
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	62 2f       	mov	r22, r18
 1ac:	29 81       	ldd	r18, Y+1	; 0x01
 1ae:	22 2f       	mov	r18, r18
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	a9 01       	movw	r20, r18
 1b4:	40 51       	subi	r20, 0x10	; 16
 1b6:	51 09       	sbc	r21, r1
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WritePin+0x146>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WritePin+0x142>
 1c6:	20 95       	com	r18
 1c8:	26 23       	and	r18, r22
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	88 31       	cpi	r24, 0x18	; 24
 1d2:	b0 f1       	brcs	.+108    	; 0x240 <DIO_WritePin+0x1c4>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	80 32       	cpi	r24, 0x20	; 32
 1d8:	98 f5       	brcc	.+102    	; 0x240 <DIO_WritePin+0x1c4>
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	c1 f4       	brne	.+48     	; 0x210 <DIO_WritePin+0x194>
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	22 e3       	ldi	r18, 0x32	; 50
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	62 2f       	mov	r22, r18
 1ee:	29 81       	ldd	r18, Y+1	; 0x01
 1f0:	22 2f       	mov	r18, r18
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	a9 01       	movw	r20, r18
 1f6:	48 51       	subi	r20, 0x18	; 24
 1f8:	51 09       	sbc	r21, r1
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WritePin+0x188>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	4a 95       	dec	r20
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WritePin+0x184>
 208:	26 2b       	or	r18, r22
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
 20e:	18 c0       	rjmp	.+48     	; 0x240 <DIO_WritePin+0x1c4>
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	22 e3       	ldi	r18, 0x32	; 50
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	62 2f       	mov	r22, r18
 21e:	29 81       	ldd	r18, Y+1	; 0x01
 220:	22 2f       	mov	r18, r18
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	a9 01       	movw	r20, r18
 226:	48 51       	subi	r20, 0x18	; 24
 228:	51 09       	sbc	r21, r1
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_WritePin+0x1b8>
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	4a 95       	dec	r20
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_WritePin+0x1b4>
 238:	20 95       	com	r18
 23a:	26 23       	and	r18, r22
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	00 00       	nop
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <DIO_SetPinDirection+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	6a 83       	std	Y+2, r22	; 0x02
	
	if (PinNum>=8&&PinNum<16){
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	88 30       	cpi	r24, 0x08	; 8
 25e:	b0 f1       	brcs	.+108    	; 0x2cc <DIO_SetPinDirection+0x80>
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	80 31       	cpi	r24, 0x10	; 16
 264:	98 f5       	brcc	.+102    	; 0x2cc <DIO_SetPinDirection+0x80>
		
		if (PinDirection){
 266:	8a 81       	ldd	r24, Y+2	; 0x02
 268:	88 23       	and	r24, r24
 26a:	c1 f0       	breq	.+48     	; 0x29c <DIO_SetPinDirection+0x50>
			Set_Bit(DDRB,(PinNum-8));
 26c:	87 e3       	ldi	r24, 0x37	; 55
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	27 e3       	ldi	r18, 0x37	; 55
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	62 2f       	mov	r22, r18
 27a:	29 81       	ldd	r18, Y+1	; 0x01
 27c:	22 2f       	mov	r18, r18
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	a9 01       	movw	r20, r18
 282:	48 50       	subi	r20, 0x08	; 8
 284:	51 09       	sbc	r21, r1
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDirection+0x44>
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	4a 95       	dec	r20
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDirection+0x40>
 294:	26 2b       	or	r18, r22
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
 29a:	18 c0       	rjmp	.+48     	; 0x2cc <DIO_SetPinDirection+0x80>
			
		}
		else {
			
			Clear_Bit(DDRB,(PinNum-8));
 29c:	87 e3       	ldi	r24, 0x37	; 55
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	27 e3       	ldi	r18, 0x37	; 55
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	20 81       	ld	r18, Z
 2a8:	62 2f       	mov	r22, r18
 2aa:	29 81       	ldd	r18, Y+1	; 0x01
 2ac:	22 2f       	mov	r18, r18
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	a9 01       	movw	r20, r18
 2b2:	48 50       	subi	r20, 0x08	; 8
 2b4:	51 09       	sbc	r21, r1
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_SetPinDirection+0x74>
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	4a 95       	dec	r20
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_SetPinDirection+0x70>
 2c4:	20 95       	com	r18
 2c6:	26 23       	and	r18, r22
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
		}
	}
	if (PinNum>=0&&PinNum<9){
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	89 30       	cpi	r24, 0x09	; 9
 2d0:	68 f5       	brcc	.+90     	; 0x32c <DIO_SetPinDirection+0xe0>
		
		if (PinDirection){
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	88 23       	and	r24, r24
 2d6:	a9 f0       	breq	.+42     	; 0x302 <DIO_SetPinDirection+0xb6>
			Set_Bit(DDRA,PinNum);
 2d8:	8a e3       	ldi	r24, 0x3A	; 58
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	2a e3       	ldi	r18, 0x3A	; 58
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	f9 01       	movw	r30, r18
 2e2:	20 81       	ld	r18, Z
 2e4:	62 2f       	mov	r22, r18
 2e6:	29 81       	ldd	r18, Y+1	; 0x01
 2e8:	42 2f       	mov	r20, r18
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPinDirection+0xaa>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	4a 95       	dec	r20
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPinDirection+0xa6>
 2fa:	26 2b       	or	r18, r22
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
 300:	15 c0       	rjmp	.+42     	; 0x32c <DIO_SetPinDirection+0xe0>
			
		}
		else {
			
			Clear_Bit(DDRA,PinNum);
 302:	8a e3       	ldi	r24, 0x3A	; 58
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	2a e3       	ldi	r18, 0x3A	; 58
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	f9 01       	movw	r30, r18
 30c:	20 81       	ld	r18, Z
 30e:	62 2f       	mov	r22, r18
 310:	29 81       	ldd	r18, Y+1	; 0x01
 312:	42 2f       	mov	r20, r18
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_SetPinDirection+0xd4>
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	4a 95       	dec	r20
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_SetPinDirection+0xd0>
 324:	20 95       	com	r18
 326:	26 23       	and	r18, r22
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
		}
	}
	
	if (PinNum>=16&&PinNum<24){
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	80 31       	cpi	r24, 0x10	; 16
 330:	b0 f1       	brcs	.+108    	; 0x39e <DIO_SetPinDirection+0x152>
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 31       	cpi	r24, 0x18	; 24
 336:	98 f5       	brcc	.+102    	; 0x39e <DIO_SetPinDirection+0x152>
		
		if (PinDirection){
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	88 23       	and	r24, r24
 33c:	c1 f0       	breq	.+48     	; 0x36e <DIO_SetPinDirection+0x122>
			Set_Bit(DDRC,(PinNum-16));
 33e:	84 e3       	ldi	r24, 0x34	; 52
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	24 e3       	ldi	r18, 0x34	; 52
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	20 81       	ld	r18, Z
 34a:	62 2f       	mov	r22, r18
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	22 2f       	mov	r18, r18
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	a9 01       	movw	r20, r18
 354:	40 51       	subi	r20, 0x10	; 16
 356:	51 09       	sbc	r21, r1
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_SetPinDirection+0x116>
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	4a 95       	dec	r20
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_SetPinDirection+0x112>
 366:	26 2b       	or	r18, r22
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
 36c:	18 c0       	rjmp	.+48     	; 0x39e <DIO_SetPinDirection+0x152>
			
		}
		else {
			
			Clear_Bit(DDRC,(PinNum-16));
 36e:	84 e3       	ldi	r24, 0x34	; 52
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	24 e3       	ldi	r18, 0x34	; 52
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	f9 01       	movw	r30, r18
 378:	20 81       	ld	r18, Z
 37a:	62 2f       	mov	r22, r18
 37c:	29 81       	ldd	r18, Y+1	; 0x01
 37e:	22 2f       	mov	r18, r18
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	a9 01       	movw	r20, r18
 384:	40 51       	subi	r20, 0x10	; 16
 386:	51 09       	sbc	r21, r1
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_SetPinDirection+0x146>
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	4a 95       	dec	r20
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_SetPinDirection+0x142>
 396:	20 95       	com	r18
 398:	26 23       	and	r18, r22
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
		}
	}
	if (PinNum>=24&&PinNum<32){
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	88 31       	cpi	r24, 0x18	; 24
 3a2:	b0 f1       	brcs	.+108    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	80 32       	cpi	r24, 0x20	; 32
 3a8:	98 f5       	brcc	.+102    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		
		if (PinDirection==1){
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	c1 f4       	brne	.+48     	; 0x3e0 <DIO_SetPinDirection+0x194>
			Set_Bit(DDRD,(PinNum-24));
 3b0:	81 e3       	ldi	r24, 0x31	; 49
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	21 e3       	ldi	r18, 0x31	; 49
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	f9 01       	movw	r30, r18
 3ba:	20 81       	ld	r18, Z
 3bc:	62 2f       	mov	r22, r18
 3be:	29 81       	ldd	r18, Y+1	; 0x01
 3c0:	22 2f       	mov	r18, r18
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	a9 01       	movw	r20, r18
 3c6:	48 51       	subi	r20, 0x18	; 24
 3c8:	51 09       	sbc	r21, r1
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_SetPinDirection+0x188>
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	4a 95       	dec	r20
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_SetPinDirection+0x184>
 3d8:	26 2b       	or	r18, r22
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
			
			Clear_Bit(DDRD,(PinNum-24));
		}
	}
	
}
 3de:	18 c0       	rjmp	.+48     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			Set_Bit(DDRD,(PinNum-24));
			
		}
		else {
			
			Clear_Bit(DDRD,(PinNum-24));
 3e0:	81 e3       	ldi	r24, 0x31	; 49
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	21 e3       	ldi	r18, 0x31	; 49
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	f9 01       	movw	r30, r18
 3ea:	20 81       	ld	r18, Z
 3ec:	62 2f       	mov	r22, r18
 3ee:	29 81       	ldd	r18, Y+1	; 0x01
 3f0:	22 2f       	mov	r18, r18
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	a9 01       	movw	r20, r18
 3f6:	48 51       	subi	r20, 0x18	; 24
 3f8:	51 09       	sbc	r21, r1
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	4a 95       	dec	r20
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	20 95       	com	r18
 40a:	26 23       	and	r18, r22
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
		}
	}
	
}
 410:	00 00       	nop
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <main>:
#include "Timer1.h"
#include "motor_config.h"

volatile uint8 flag=ZERO;
int main(void)
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	6c 97       	sbiw	r28, 0x1c	; 28
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
	
timer1_init();	
 430:	0e 94 12 03 	call	0x624	; 0x624 <timer1_init>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	a0 e2       	ldi	r26, 0x20	; 32
 43a:	b1 e4       	ldi	r27, 0x41	; 65
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	9a 83       	std	Y+2, r25	; 0x02
 440:	ab 83       	std	Y+3, r26	; 0x03
 442:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	4a e7       	ldi	r20, 0x7A	; 122
 44a:	53 e4       	ldi	r21, 0x43	; 67
 44c:	69 81       	ldd	r22, Y+1	; 0x01
 44e:	7a 81       	ldd	r23, Y+2	; 0x02
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	9c 81       	ldd	r25, Y+4	; 0x04
 454:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 458:	dc 01       	movw	r26, r24
 45a:	cb 01       	movw	r24, r22
 45c:	8b 8b       	std	Y+19, r24	; 0x13
 45e:	9c 8b       	std	Y+20, r25	; 0x14
 460:	ad 8b       	std	Y+21, r26	; 0x15
 462:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e8       	ldi	r20, 0x80	; 128
 46a:	5f e3       	ldi	r21, 0x3F	; 63
 46c:	6b 89       	ldd	r22, Y+19	; 0x13
 46e:	7c 89       	ldd	r23, Y+20	; 0x14
 470:	8d 89       	ldd	r24, Y+21	; 0x15
 472:	9e 89       	ldd	r25, Y+22	; 0x16
 474:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__cmpsf2>
 478:	88 23       	and	r24, r24
 47a:	2c f4       	brge	.+10     	; 0x486 <main+0x6a>
		__ticks = 1;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	98 8f       	std	Y+24, r25	; 0x18
 482:	8f 8b       	std	Y+23, r24	; 0x17
 484:	3f c0       	rjmp	.+126    	; 0x504 <main+0xe8>
	else if (__tmp > 65535)
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	3f ef       	ldi	r19, 0xFF	; 255
 48a:	4f e7       	ldi	r20, 0x7F	; 127
 48c:	57 e4       	ldi	r21, 0x47	; 71
 48e:	6b 89       	ldd	r22, Y+19	; 0x13
 490:	7c 89       	ldd	r23, Y+20	; 0x14
 492:	8d 89       	ldd	r24, Y+21	; 0x15
 494:	9e 89       	ldd	r25, Y+22	; 0x16
 496:	0e 94 56 06 	call	0xcac	; 0xcac <__gesf2>
 49a:	18 16       	cp	r1, r24
 49c:	4c f5       	brge	.+82     	; 0x4f0 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	40 e2       	ldi	r20, 0x20	; 32
 4a4:	51 e4       	ldi	r21, 0x41	; 65
 4a6:	69 81       	ldd	r22, Y+1	; 0x01
 4a8:	7a 81       	ldd	r23, Y+2	; 0x02
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	9c 81       	ldd	r25, Y+4	; 0x04
 4ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 4b2:	dc 01       	movw	r26, r24
 4b4:	cb 01       	movw	r24, r22
 4b6:	bc 01       	movw	r22, r24
 4b8:	cd 01       	movw	r24, r26
 4ba:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
 4be:	dc 01       	movw	r26, r24
 4c0:	cb 01       	movw	r24, r22
 4c2:	98 8f       	std	Y+24, r25	; 0x18
 4c4:	8f 8b       	std	Y+23, r24	; 0x17
 4c6:	0f c0       	rjmp	.+30     	; 0x4e6 <main+0xca>
 4c8:	89 e1       	ldi	r24, 0x19	; 25
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	9a 8f       	std	Y+26, r25	; 0x1a
 4ce:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4d0:	89 8d       	ldd	r24, Y+25	; 0x19
 4d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0xb8>
 4d8:	9a 8f       	std	Y+26, r25	; 0x1a
 4da:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4dc:	8f 89       	ldd	r24, Y+23	; 0x17
 4de:	98 8d       	ldd	r25, Y+24	; 0x18
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	98 8f       	std	Y+24, r25	; 0x18
 4e4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e6:	8f 89       	ldd	r24, Y+23	; 0x17
 4e8:	98 8d       	ldd	r25, Y+24	; 0x18
 4ea:	89 2b       	or	r24, r25
 4ec:	69 f7       	brne	.-38     	; 0x4c8 <main+0xac>
 4ee:	14 c0       	rjmp	.+40     	; 0x518 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4f0:	6b 89       	ldd	r22, Y+19	; 0x13
 4f2:	7c 89       	ldd	r23, Y+20	; 0x14
 4f4:	8d 89       	ldd	r24, Y+21	; 0x15
 4f6:	9e 89       	ldd	r25, Y+22	; 0x16
 4f8:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
 4fc:	dc 01       	movw	r26, r24
 4fe:	cb 01       	movw	r24, r22
 500:	98 8f       	std	Y+24, r25	; 0x18
 502:	8f 8b       	std	Y+23, r24	; 0x17
 504:	8f 89       	ldd	r24, Y+23	; 0x17
 506:	98 8d       	ldd	r25, Y+24	; 0x18
 508:	9c 8f       	std	Y+28, r25	; 0x1c
 50a:	8b 8f       	std	Y+27, r24	; 0x1b
 50c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 50e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <main+0xf4>
 514:	9c 8f       	std	Y+28, r25	; 0x1c
 516:	8b 8f       	std	Y+27, r24	; 0x1b
 _delay_ms(10);
 MODE_SELECT (10,5000,1);
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	48 e8       	ldi	r20, 0x88	; 136
 51c:	53 e1       	ldi	r21, 0x13	; 19
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	80 e2       	ldi	r24, 0x20	; 32
 524:	91 e4       	ldi	r25, 0x41	; 65
 526:	0e 94 6f 03 	call	0x6de	; 0x6de <MODE_SELECT>
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	96 e9       	ldi	r25, 0x96	; 150
 52e:	a8 e1       	ldi	r26, 0x18	; 24
 530:	bb e4       	ldi	r27, 0x4B	; 75
 532:	8d 83       	std	Y+5, r24	; 0x05
 534:	9e 83       	std	Y+6, r25	; 0x06
 536:	af 83       	std	Y+7, r26	; 0x07
 538:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	4a e7       	ldi	r20, 0x7A	; 122
 540:	53 e4       	ldi	r21, 0x43	; 67
 542:	6d 81       	ldd	r22, Y+5	; 0x05
 544:	7e 81       	ldd	r23, Y+6	; 0x06
 546:	8f 81       	ldd	r24, Y+7	; 0x07
 548:	98 85       	ldd	r25, Y+8	; 0x08
 54a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 54e:	dc 01       	movw	r26, r24
 550:	cb 01       	movw	r24, r22
 552:	89 87       	std	Y+9, r24	; 0x09
 554:	9a 87       	std	Y+10, r25	; 0x0a
 556:	ab 87       	std	Y+11, r26	; 0x0b
 558:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	40 e8       	ldi	r20, 0x80	; 128
 560:	5f e3       	ldi	r21, 0x3F	; 63
 562:	69 85       	ldd	r22, Y+9	; 0x09
 564:	7a 85       	ldd	r23, Y+10	; 0x0a
 566:	8b 85       	ldd	r24, Y+11	; 0x0b
 568:	9c 85       	ldd	r25, Y+12	; 0x0c
 56a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__cmpsf2>
 56e:	88 23       	and	r24, r24
 570:	2c f4       	brge	.+10     	; 0x57c <main+0x160>
		__ticks = 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	9e 87       	std	Y+14, r25	; 0x0e
 578:	8d 87       	std	Y+13, r24	; 0x0d
 57a:	3f c0       	rjmp	.+126    	; 0x5fa <main+0x1de>
	else if (__tmp > 65535)
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	3f ef       	ldi	r19, 0xFF	; 255
 580:	4f e7       	ldi	r20, 0x7F	; 127
 582:	57 e4       	ldi	r21, 0x47	; 71
 584:	69 85       	ldd	r22, Y+9	; 0x09
 586:	7a 85       	ldd	r23, Y+10	; 0x0a
 588:	8b 85       	ldd	r24, Y+11	; 0x0b
 58a:	9c 85       	ldd	r25, Y+12	; 0x0c
 58c:	0e 94 56 06 	call	0xcac	; 0xcac <__gesf2>
 590:	18 16       	cp	r1, r24
 592:	4c f5       	brge	.+82     	; 0x5e6 <main+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	40 e2       	ldi	r20, 0x20	; 32
 59a:	51 e4       	ldi	r21, 0x41	; 65
 59c:	6d 81       	ldd	r22, Y+5	; 0x05
 59e:	7e 81       	ldd	r23, Y+6	; 0x06
 5a0:	8f 81       	ldd	r24, Y+7	; 0x07
 5a2:	98 85       	ldd	r25, Y+8	; 0x08
 5a4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 5a8:	dc 01       	movw	r26, r24
 5aa:	cb 01       	movw	r24, r22
 5ac:	bc 01       	movw	r22, r24
 5ae:	cd 01       	movw	r24, r26
 5b0:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
 5b4:	dc 01       	movw	r26, r24
 5b6:	cb 01       	movw	r24, r22
 5b8:	9e 87       	std	Y+14, r25	; 0x0e
 5ba:	8d 87       	std	Y+13, r24	; 0x0d
 5bc:	0f c0       	rjmp	.+30     	; 0x5dc <main+0x1c0>
 5be:	89 e1       	ldi	r24, 0x19	; 25
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	98 8b       	std	Y+16, r25	; 0x10
 5c4:	8f 87       	std	Y+15, r24	; 0x0f
 5c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 5c8:	98 89       	ldd	r25, Y+16	; 0x10
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <main+0x1ae>
 5ce:	98 8b       	std	Y+16, r25	; 0x10
 5d0:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 5d4:	9e 85       	ldd	r25, Y+14	; 0x0e
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	9e 87       	std	Y+14, r25	; 0x0e
 5da:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 5de:	9e 85       	ldd	r25, Y+14	; 0x0e
 5e0:	89 2b       	or	r24, r25
 5e2:	69 f7       	brne	.-38     	; 0x5be <main+0x1a2>
 5e4:	14 c0       	rjmp	.+40     	; 0x60e <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5e6:	69 85       	ldd	r22, Y+9	; 0x09
 5e8:	7a 85       	ldd	r23, Y+10	; 0x0a
 5ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 5ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 5ee:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
 5f2:	dc 01       	movw	r26, r24
 5f4:	cb 01       	movw	r24, r22
 5f6:	9e 87       	std	Y+14, r25	; 0x0e
 5f8:	8d 87       	std	Y+13, r24	; 0x0d
 5fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 5fc:	9e 85       	ldd	r25, Y+14	; 0x0e
 5fe:	9a 8b       	std	Y+18, r25	; 0x12
 600:	89 8b       	std	Y+17, r24	; 0x11
 602:	89 89       	ldd	r24, Y+17	; 0x11
 604:	9a 89       	ldd	r25, Y+18	; 0x12
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <main+0x1ea>
 60a:	9a 8b       	std	Y+18, r25	; 0x12
 60c:	89 8b       	std	Y+17, r24	; 0x11
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	90 e0       	ldi	r25, 0x00	; 0

  _delay_ms(10000000);

}
 612:	6c 96       	adiw	r28, 0x1c	; 28
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <timer1_init>:
	ICR1H =(COMPARE_VALUE>>one_byte);
	ICR1L=COMPARE_VALUE;
	OCR1BH=ZERO;
	OCR1BL=ZERO;
	
	}
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	8d e4       	ldi	r24, 0x4D	; 77
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fc 01       	movw	r30, r24
 632:	10 82       	st	Z, r1
 634:	8c e4       	ldi	r24, 0x4C	; 76
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	fc 01       	movw	r30, r24
 63a:	10 82       	st	Z, r1
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	8c e1       	ldi	r24, 0x1C	; 28
 640:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	8d e1       	ldi	r24, 0x1D	; 29
 648:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	8a e1       	ldi	r24, 0x1A	; 26
 650:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	8b e1       	ldi	r24, 0x1B	; 27
 658:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	8e e1       	ldi	r24, 0x1E	; 30
 660:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	8f e1       	ldi	r24, 0x1F	; 31
 668:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_SetPinDirection>
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	8a e1       	ldi	r24, 0x1A	; 26
 670:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	8b e1       	ldi	r24, 0x1B	; 27
 678:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 67c:	8f e4       	ldi	r24, 0x4F	; 79
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	2f e4       	ldi	r18, 0x4F	; 79
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	f9 01       	movw	r30, r18
 686:	20 81       	ld	r18, Z
 688:	20 64       	ori	r18, 0x40	; 64
 68a:	fc 01       	movw	r30, r24
 68c:	20 83       	st	Z, r18
 68e:	8f e4       	ldi	r24, 0x4F	; 79
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	2f e4       	ldi	r18, 0x4F	; 79
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	f9 01       	movw	r30, r18
 698:	20 81       	ld	r18, Z
 69a:	20 68       	ori	r18, 0x80	; 128
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
 6a0:	8e e4       	ldi	r24, 0x4E	; 78
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	2e e4       	ldi	r18, 0x4E	; 78
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	20 81       	ld	r18, Z
 6ac:	22 60       	ori	r18, 0x02	; 2
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
 6b2:	8f e4       	ldi	r24, 0x4F	; 79
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	2f e4       	ldi	r18, 0x4F	; 79
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	f9 01       	movw	r30, r18
 6bc:	20 81       	ld	r18, Z
 6be:	20 61       	ori	r18, 0x10	; 16
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
 6c4:	8f e4       	ldi	r24, 0x4F	; 79
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	2f e4       	ldi	r18, 0x4F	; 79
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	f9 01       	movw	r30, r18
 6ce:	20 81       	ld	r18, Z
 6d0:	20 62       	ori	r18, 0x20	; 32
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
 6d6:	00 00       	nop
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <MODE_SELECT>:

Function Return      : N/A

*******************************************************************************/
	void MODE_SELECT (float duty,uint16 top,uint8 mode)
	{ uint16 COMPARE_VALUE2=ZERO;
 6de:	cf 92       	push	r12
 6e0:	df 92       	push	r13
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	29 97       	sbiw	r28, 0x09	; 9
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	de bf       	out	0x3e, r29	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	6b 83       	std	Y+3, r22	; 0x03
 6fc:	7c 83       	std	Y+4, r23	; 0x04
 6fe:	8d 83       	std	Y+5, r24	; 0x05
 700:	9e 83       	std	Y+6, r25	; 0x06
 702:	58 87       	std	Y+8, r21	; 0x08
 704:	4f 83       	std	Y+7, r20	; 0x07
 706:	29 87       	std	Y+9, r18	; 0x09
 708:	1a 82       	std	Y+2, r1	; 0x02
 70a:	19 82       	std	Y+1, r1	; 0x01
		if (mode==ONE){
 70c:	89 85       	ldd	r24, Y+9	; 0x09
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	09 f0       	breq	.+2      	; 0x714 <MODE_SELECT+0x36>
 712:	79 c0       	rjmp	.+242    	; 0x806 <MODE_SELECT+0x128>
			DIO_WritePin(MOTOR2_R,0);
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	8e e1       	ldi	r24, 0x1E	; 30
 718:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(MOTOR2_L,1);
 71c:	61 e0       	ldi	r22, 0x01	; 1
 71e:	8f e1       	ldi	r24, 0x1F	; 31
 720:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			Set_Bit(TCCR1A,WGM11); /* mode 14 */
 724:	8f e4       	ldi	r24, 0x4F	; 79
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	2f e4       	ldi	r18, 0x4F	; 79
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	f9 01       	movw	r30, r18
 72e:	20 81       	ld	r18, Z
 730:	22 60       	ori	r18, 0x02	; 2
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18
			Set_Bit(TCCR1B,WGM12); /* mode 14 */
 736:	8e e4       	ldi	r24, 0x4E	; 78
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	2e e4       	ldi	r18, 0x4E	; 78
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	f9 01       	movw	r30, r18
 740:	20 81       	ld	r18, Z
 742:	28 60       	ori	r18, 0x08	; 8
 744:	fc 01       	movw	r30, r24
 746:	20 83       	st	Z, r18
			Set_Bit(TCCR1B,WGM13); /* mode 14 */
 748:	8e e4       	ldi	r24, 0x4E	; 78
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	2e e4       	ldi	r18, 0x4E	; 78
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	20 81       	ld	r18, Z
 754:	20 61       	ori	r18, 0x10	; 16
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18
			ICR1H =(top>>one_byte);
 75a:	87 e4       	ldi	r24, 0x47	; 71
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	2f 81       	ldd	r18, Y+7	; 0x07
 760:	38 85       	ldd	r19, Y+8	; 0x08
 762:	23 2f       	mov	r18, r19
 764:	33 27       	eor	r19, r19
 766:	fc 01       	movw	r30, r24
 768:	20 83       	st	Z, r18
			ICR1L=top;
 76a:	86 e4       	ldi	r24, 0x46	; 70
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	2f 81       	ldd	r18, Y+7	; 0x07
 770:	fc 01       	movw	r30, r24
 772:	20 83       	st	Z, r18
			COMPARE_VALUE2=(top-(uint16)((duty/100)*(top+1)));
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	48 ec       	ldi	r20, 0xC8	; 200
 77a:	52 e4       	ldi	r21, 0x42	; 66
 77c:	6b 81       	ldd	r22, Y+3	; 0x03
 77e:	7c 81       	ldd	r23, Y+4	; 0x04
 780:	8d 81       	ldd	r24, Y+5	; 0x05
 782:	9e 81       	ldd	r25, Y+6	; 0x06
 784:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
 788:	dc 01       	movw	r26, r24
 78a:	cb 01       	movw	r24, r22
 78c:	6c 01       	movw	r12, r24
 78e:	7d 01       	movw	r14, r26
 790:	8f 81       	ldd	r24, Y+7	; 0x07
 792:	98 85       	ldd	r25, Y+8	; 0x08
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	cc 01       	movw	r24, r24
 798:	a0 e0       	ldi	r26, 0x00	; 0
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	bc 01       	movw	r22, r24
 79e:	cd 01       	movw	r24, r26
 7a0:	0e 94 a4 05 	call	0xb48	; 0xb48 <__floatunsisf>
 7a4:	dc 01       	movw	r26, r24
 7a6:	cb 01       	movw	r24, r22
 7a8:	9c 01       	movw	r18, r24
 7aa:	ad 01       	movw	r20, r26
 7ac:	c7 01       	movw	r24, r14
 7ae:	b6 01       	movw	r22, r12
 7b0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 7b4:	dc 01       	movw	r26, r24
 7b6:	cb 01       	movw	r24, r22
 7b8:	bc 01       	movw	r22, r24
 7ba:	cd 01       	movw	r24, r26
 7bc:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
 7c0:	dc 01       	movw	r26, r24
 7c2:	cb 01       	movw	r24, r22
 7c4:	9c 01       	movw	r18, r24
 7c6:	8f 81       	ldd	r24, Y+7	; 0x07
 7c8:	98 85       	ldd	r25, Y+8	; 0x08
 7ca:	82 1b       	sub	r24, r18
 7cc:	93 0b       	sbc	r25, r19
 7ce:	9a 83       	std	Y+2, r25	; 0x02
 7d0:	89 83       	std	Y+1, r24	; 0x01
			OCR1BH=(COMPARE_VALUE2>>one_byte);
 7d2:	89 e4       	ldi	r24, 0x49	; 73
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	29 81       	ldd	r18, Y+1	; 0x01
 7d8:	3a 81       	ldd	r19, Y+2	; 0x02
 7da:	23 2f       	mov	r18, r19
 7dc:	33 27       	eor	r19, r19
 7de:	fc 01       	movw	r30, r24
 7e0:	20 83       	st	Z, r18
			OCR1BL=COMPARE_VALUE2;
 7e2:	88 e4       	ldi	r24, 0x48	; 72
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	29 81       	ldd	r18, Y+1	; 0x01
 7e8:	fc 01       	movw	r30, r24
 7ea:	20 83       	st	Z, r18
           OCR1AH=(COMPARE_VALUE2>>one_byte);
 7ec:	8b e4       	ldi	r24, 0x4B	; 75
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	29 81       	ldd	r18, Y+1	; 0x01
 7f2:	3a 81       	ldd	r19, Y+2	; 0x02
 7f4:	23 2f       	mov	r18, r19
 7f6:	33 27       	eor	r19, r19
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
           OCR1AL=COMPARE_VALUE2;
 7fc:	8a e4       	ldi	r24, 0x4A	; 74
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	29 81       	ldd	r18, Y+1	; 0x01
 802:	fc 01       	movw	r30, r24
 804:	20 83       	st	Z, r18
		}
	
	if (mode==TWO){
 806:	89 85       	ldd	r24, Y+9	; 0x09
 808:	82 30       	cpi	r24, 0x02	; 2
 80a:	09 f0       	breq	.+2      	; 0x80e <MODE_SELECT+0x130>
 80c:	79 c0       	rjmp	.+242    	; 0x900 <__stack+0xa1>
		DIO_WritePin(MOTOR2_R,LOW);
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	8e e1       	ldi	r24, 0x1E	; 30
 812:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(MOTOR2_L,HIGH);
 816:	61 e0       	ldi	r22, 0x01	; 1
 818:	8f e1       	ldi	r24, 0x1F	; 31
 81a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		Set_Bit(TCCR1A,WGM11); /* mode 14 */
 81e:	8f e4       	ldi	r24, 0x4F	; 79
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	2f e4       	ldi	r18, 0x4F	; 79
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	f9 01       	movw	r30, r18
 828:	20 81       	ld	r18, Z
 82a:	22 60       	ori	r18, 0x02	; 2
 82c:	fc 01       	movw	r30, r24
 82e:	20 83       	st	Z, r18
		Clear_Bit(TCCR1B,WGM12); /* mode 14 */
 830:	8e e4       	ldi	r24, 0x4E	; 78
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	2e e4       	ldi	r18, 0x4E	; 78
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	f9 01       	movw	r30, r18
 83a:	20 81       	ld	r18, Z
 83c:	27 7f       	andi	r18, 0xF7	; 247
 83e:	fc 01       	movw	r30, r24
 840:	20 83       	st	Z, r18
		Set_Bit(TCCR1B,WGM13); /* mode 14 */
 842:	8e e4       	ldi	r24, 0x4E	; 78
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	2e e4       	ldi	r18, 0x4E	; 78
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	f9 01       	movw	r30, r18
 84c:	20 81       	ld	r18, Z
 84e:	20 61       	ori	r18, 0x10	; 16
 850:	fc 01       	movw	r30, r24
 852:	20 83       	st	Z, r18
		ICR1H =(top>>one_byte);
 854:	87 e4       	ldi	r24, 0x47	; 71
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	2f 81       	ldd	r18, Y+7	; 0x07
 85a:	38 85       	ldd	r19, Y+8	; 0x08
 85c:	23 2f       	mov	r18, r19
 85e:	33 27       	eor	r19, r19
 860:	fc 01       	movw	r30, r24
 862:	20 83       	st	Z, r18
		ICR1L=top;
 864:	86 e4       	ldi	r24, 0x46	; 70
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	2f 81       	ldd	r18, Y+7	; 0x07
 86a:	fc 01       	movw	r30, r24
 86c:	20 83       	st	Z, r18
		COMPARE_VALUE2=(top-(uint16)((duty/100)*(top+1)));
 86e:	20 e0       	ldi	r18, 0x00	; 0
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	48 ec       	ldi	r20, 0xC8	; 200
 874:	52 e4       	ldi	r21, 0x42	; 66
 876:	6b 81       	ldd	r22, Y+3	; 0x03
 878:	7c 81       	ldd	r23, Y+4	; 0x04
 87a:	8d 81       	ldd	r24, Y+5	; 0x05
 87c:	9e 81       	ldd	r25, Y+6	; 0x06
 87e:	0e 94 03 05 	call	0xa06	; 0xa06 <__divsf3>
 882:	dc 01       	movw	r26, r24
 884:	cb 01       	movw	r24, r22
 886:	6c 01       	movw	r12, r24
 888:	7d 01       	movw	r14, r26
 88a:	8f 81       	ldd	r24, Y+7	; 0x07
 88c:	98 85       	ldd	r25, Y+8	; 0x08
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	cc 01       	movw	r24, r24
 892:	a0 e0       	ldi	r26, 0x00	; 0
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	bc 01       	movw	r22, r24
 898:	cd 01       	movw	r24, r26
 89a:	0e 94 a4 05 	call	0xb48	; 0xb48 <__floatunsisf>
 89e:	dc 01       	movw	r26, r24
 8a0:	cb 01       	movw	r24, r22
 8a2:	9c 01       	movw	r18, r24
 8a4:	ad 01       	movw	r20, r26
 8a6:	c7 01       	movw	r24, r14
 8a8:	b6 01       	movw	r22, r12
 8aa:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__mulsf3>
 8ae:	dc 01       	movw	r26, r24
 8b0:	cb 01       	movw	r24, r22
 8b2:	bc 01       	movw	r22, r24
 8b4:	cd 01       	movw	r24, r26
 8b6:	0e 94 75 05 	call	0xaea	; 0xaea <__fixunssfsi>
 8ba:	dc 01       	movw	r26, r24
 8bc:	cb 01       	movw	r24, r22
 8be:	9c 01       	movw	r18, r24
 8c0:	8f 81       	ldd	r24, Y+7	; 0x07
 8c2:	98 85       	ldd	r25, Y+8	; 0x08
 8c4:	82 1b       	sub	r24, r18
 8c6:	93 0b       	sbc	r25, r19
 8c8:	9a 83       	std	Y+2, r25	; 0x02
 8ca:	89 83       	std	Y+1, r24	; 0x01
		OCR1BH=(COMPARE_VALUE2>>one_byte);
 8cc:	89 e4       	ldi	r24, 0x49	; 73
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	29 81       	ldd	r18, Y+1	; 0x01
 8d2:	3a 81       	ldd	r19, Y+2	; 0x02
 8d4:	23 2f       	mov	r18, r19
 8d6:	33 27       	eor	r19, r19
 8d8:	fc 01       	movw	r30, r24
 8da:	20 83       	st	Z, r18
		OCR1BL=COMPARE_VALUE2;
 8dc:	88 e4       	ldi	r24, 0x48	; 72
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	29 81       	ldd	r18, Y+1	; 0x01
 8e2:	fc 01       	movw	r30, r24
 8e4:	20 83       	st	Z, r18
		OCR1AH=(COMPARE_VALUE2>>one_byte);
 8e6:	8b e4       	ldi	r24, 0x4B	; 75
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	29 81       	ldd	r18, Y+1	; 0x01
 8ec:	3a 81       	ldd	r19, Y+2	; 0x02
 8ee:	23 2f       	mov	r18, r19
 8f0:	33 27       	eor	r19, r19
 8f2:	fc 01       	movw	r30, r24
 8f4:	20 83       	st	Z, r18
		OCR1AL=COMPARE_VALUE2;
 8f6:	8a e4       	ldi	r24, 0x4A	; 74
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	29 81       	ldd	r18, Y+1	; 0x01
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 83       	st	Z, r18
	}
	}
 900:	00 00       	nop
 902:	29 96       	adiw	r28, 0x09	; 9
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	f8 94       	cli
 908:	de bf       	out	0x3e, r29	; 62
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	cd bf       	out	0x3d, r28	; 61
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	ff 90       	pop	r15
 914:	ef 90       	pop	r14
 916:	df 90       	pop	r13
 918:	cf 90       	pop	r12
 91a:	08 95       	ret

0000091c <__vector_10>:
   *Return:void
   *Description: to set flag only after 1 second 

   ********************************************************/
ISR(TIMER0_COMP_vect)
{  i++;
 91c:	1f 92       	push	r1
 91e:	0f 92       	push	r0
 920:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	2f 93       	push	r18
 92a:	3f 93       	push	r19
 92c:	8f 93       	push	r24
 92e:	9f 93       	push	r25
 930:	ef 93       	push	r30
 932:	ff 93       	push	r31
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
 93c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 940:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <i+0x1>
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <i+0x1>
 94a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <i>
	if (i<One_sec){
 94e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <i>
 952:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <i+0x1>
 956:	88 3e       	cpi	r24, 0xE8	; 232
 958:	93 40       	sbci	r25, 0x03	; 3
 95a:	48 f0       	brcs	.+18     	; 0x96e <__vector_10+0x52>
	}
	else {	
		i=ZERO;
 95c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <i+0x1>
 960:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
		flag++;
 964:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 968:	8f 5f       	subi	r24, 0xFF	; 255
 96a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		
		}
		Set_Bit(SREG,GIE);  /*  Set global interrupt*/
 96e:	8f e5       	ldi	r24, 0x5F	; 95
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	2f e5       	ldi	r18, 0x5F	; 95
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	f9 01       	movw	r30, r18
 978:	20 81       	ld	r18, Z
 97a:	20 68       	ori	r18, 0x80	; 128
 97c:	fc 01       	movw	r30, r24
 97e:	20 83       	st	Z, r18

}
 980:	00 00       	nop
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	ff 91       	pop	r31
 988:	ef 91       	pop	r30
 98a:	9f 91       	pop	r25
 98c:	8f 91       	pop	r24
 98e:	3f 91       	pop	r19
 990:	2f 91       	pop	r18
 992:	0f 90       	pop	r0
 994:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <__vector_3>:
   *Return:void
   *Description: Handle external interrupt

   ********************************************************/
ISR(INT2_vect)
{  flag=FIVE;
 99e:	1f 92       	push	r1
 9a0:	0f 92       	push	r0
 9a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9a6:	0f 92       	push	r0
 9a8:	11 24       	eor	r1, r1
 9aa:	2f 93       	push	r18
 9ac:	3f 93       	push	r19
 9ae:	8f 93       	push	r24
 9b0:	9f 93       	push	r25
 9b2:	ef 93       	push	r30
 9b4:	ff 93       	push	r31
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	cd b7       	in	r28, 0x3d	; 61
 9bc:	de b7       	in	r29, 0x3e	; 62
 9be:	85 e0       	ldi	r24, 0x05	; 5
 9c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
i=ZERO;
 9c4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <i+0x1>
 9c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <i>
  		Set_Bit(SREG,GIE);  /*  Set global interrupt*/
 9cc:	8f e5       	ldi	r24, 0x5F	; 95
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	2f e5       	ldi	r18, 0x5F	; 95
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	f9 01       	movw	r30, r18
 9d6:	20 81       	ld	r18, Z
 9d8:	20 68       	ori	r18, 0x80	; 128
 9da:	fc 01       	movw	r30, r24
 9dc:	20 83       	st	Z, r18
 9de:	00 00       	nop
 9e0:	df 91       	pop	r29
 9e2:	cf 91       	pop	r28
 9e4:	ff 91       	pop	r31
 9e6:	ef 91       	pop	r30
 9e8:	9f 91       	pop	r25
 9ea:	8f 91       	pop	r24
 9ec:	3f 91       	pop	r19
 9ee:	2f 91       	pop	r18
 9f0:	0f 90       	pop	r0
 9f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9f6:	0f 90       	pop	r0
 9f8:	1f 90       	pop	r1
 9fa:	18 95       	reti

000009fc <__cmpsf2>:
 9fc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_cmp>
 a00:	08 f4       	brcc	.+2      	; 0xa04 <__cmpsf2+0x8>
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	08 95       	ret

00000a06 <__divsf3>:
 a06:	0e 94 17 05 	call	0xa2e	; 0xa2e <__divsf3x>
 a0a:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_round>
 a0e:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_pscB>
 a12:	58 f0       	brcs	.+22     	; 0xa2a <__divsf3+0x24>
 a14:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_pscA>
 a18:	40 f0       	brcs	.+16     	; 0xa2a <__divsf3+0x24>
 a1a:	29 f4       	brne	.+10     	; 0xa26 <__divsf3+0x20>
 a1c:	5f 3f       	cpi	r21, 0xFF	; 255
 a1e:	29 f0       	breq	.+10     	; 0xa2a <__divsf3+0x24>
 a20:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_inf>
 a24:	51 11       	cpse	r21, r1
 a26:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_szero>
 a2a:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_nan>

00000a2e <__divsf3x>:
 a2e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__fp_split3>
 a32:	68 f3       	brcs	.-38     	; 0xa0e <__divsf3+0x8>

00000a34 <__divsf3_pse>:
 a34:	99 23       	and	r25, r25
 a36:	b1 f3       	breq	.-20     	; 0xa24 <__divsf3+0x1e>
 a38:	55 23       	and	r21, r21
 a3a:	91 f3       	breq	.-28     	; 0xa20 <__divsf3+0x1a>
 a3c:	95 1b       	sub	r25, r21
 a3e:	55 0b       	sbc	r21, r21
 a40:	bb 27       	eor	r27, r27
 a42:	aa 27       	eor	r26, r26
 a44:	62 17       	cp	r22, r18
 a46:	73 07       	cpc	r23, r19
 a48:	84 07       	cpc	r24, r20
 a4a:	38 f0       	brcs	.+14     	; 0xa5a <__divsf3_pse+0x26>
 a4c:	9f 5f       	subi	r25, 0xFF	; 255
 a4e:	5f 4f       	sbci	r21, 0xFF	; 255
 a50:	22 0f       	add	r18, r18
 a52:	33 1f       	adc	r19, r19
 a54:	44 1f       	adc	r20, r20
 a56:	aa 1f       	adc	r26, r26
 a58:	a9 f3       	breq	.-22     	; 0xa44 <__divsf3_pse+0x10>
 a5a:	35 d0       	rcall	.+106    	; 0xac6 <__divsf3_pse+0x92>
 a5c:	0e 2e       	mov	r0, r30
 a5e:	3a f0       	brmi	.+14     	; 0xa6e <__divsf3_pse+0x3a>
 a60:	e0 e8       	ldi	r30, 0x80	; 128
 a62:	32 d0       	rcall	.+100    	; 0xac8 <__divsf3_pse+0x94>
 a64:	91 50       	subi	r25, 0x01	; 1
 a66:	50 40       	sbci	r21, 0x00	; 0
 a68:	e6 95       	lsr	r30
 a6a:	00 1c       	adc	r0, r0
 a6c:	ca f7       	brpl	.-14     	; 0xa60 <__divsf3_pse+0x2c>
 a6e:	2b d0       	rcall	.+86     	; 0xac6 <__divsf3_pse+0x92>
 a70:	fe 2f       	mov	r31, r30
 a72:	29 d0       	rcall	.+82     	; 0xac6 <__divsf3_pse+0x92>
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	bb 1f       	adc	r27, r27
 a7c:	26 17       	cp	r18, r22
 a7e:	37 07       	cpc	r19, r23
 a80:	48 07       	cpc	r20, r24
 a82:	ab 07       	cpc	r26, r27
 a84:	b0 e8       	ldi	r27, 0x80	; 128
 a86:	09 f0       	breq	.+2      	; 0xa8a <__divsf3_pse+0x56>
 a88:	bb 0b       	sbc	r27, r27
 a8a:	80 2d       	mov	r24, r0
 a8c:	bf 01       	movw	r22, r30
 a8e:	ff 27       	eor	r31, r31
 a90:	93 58       	subi	r25, 0x83	; 131
 a92:	5f 4f       	sbci	r21, 0xFF	; 255
 a94:	3a f0       	brmi	.+14     	; 0xaa4 <__divsf3_pse+0x70>
 a96:	9e 3f       	cpi	r25, 0xFE	; 254
 a98:	51 05       	cpc	r21, r1
 a9a:	78 f0       	brcs	.+30     	; 0xaba <__divsf3_pse+0x86>
 a9c:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_inf>
 aa0:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_szero>
 aa4:	5f 3f       	cpi	r21, 0xFF	; 255
 aa6:	e4 f3       	brlt	.-8      	; 0xaa0 <__divsf3_pse+0x6c>
 aa8:	98 3e       	cpi	r25, 0xE8	; 232
 aaa:	d4 f3       	brlt	.-12     	; 0xaa0 <__divsf3_pse+0x6c>
 aac:	86 95       	lsr	r24
 aae:	77 95       	ror	r23
 ab0:	67 95       	ror	r22
 ab2:	b7 95       	ror	r27
 ab4:	f7 95       	ror	r31
 ab6:	9f 5f       	subi	r25, 0xFF	; 255
 ab8:	c9 f7       	brne	.-14     	; 0xaac <__divsf3_pse+0x78>
 aba:	88 0f       	add	r24, r24
 abc:	91 1d       	adc	r25, r1
 abe:	96 95       	lsr	r25
 ac0:	87 95       	ror	r24
 ac2:	97 f9       	bld	r25, 7
 ac4:	08 95       	ret
 ac6:	e1 e0       	ldi	r30, 0x01	; 1
 ac8:	66 0f       	add	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	bb 1f       	adc	r27, r27
 ad0:	62 17       	cp	r22, r18
 ad2:	73 07       	cpc	r23, r19
 ad4:	84 07       	cpc	r24, r20
 ad6:	ba 07       	cpc	r27, r26
 ad8:	20 f0       	brcs	.+8      	; 0xae2 <__divsf3_pse+0xae>
 ada:	62 1b       	sub	r22, r18
 adc:	73 0b       	sbc	r23, r19
 ade:	84 0b       	sbc	r24, r20
 ae0:	ba 0b       	sbc	r27, r26
 ae2:	ee 1f       	adc	r30, r30
 ae4:	88 f7       	brcc	.-30     	; 0xac8 <__divsf3_pse+0x94>
 ae6:	e0 95       	com	r30
 ae8:	08 95       	ret

00000aea <__fixunssfsi>:
 aea:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_splitA>
 aee:	88 f0       	brcs	.+34     	; 0xb12 <__fixunssfsi+0x28>
 af0:	9f 57       	subi	r25, 0x7F	; 127
 af2:	98 f0       	brcs	.+38     	; 0xb1a <__fixunssfsi+0x30>
 af4:	b9 2f       	mov	r27, r25
 af6:	99 27       	eor	r25, r25
 af8:	b7 51       	subi	r27, 0x17	; 23
 afa:	b0 f0       	brcs	.+44     	; 0xb28 <__fixunssfsi+0x3e>
 afc:	e1 f0       	breq	.+56     	; 0xb36 <__fixunssfsi+0x4c>
 afe:	66 0f       	add	r22, r22
 b00:	77 1f       	adc	r23, r23
 b02:	88 1f       	adc	r24, r24
 b04:	99 1f       	adc	r25, r25
 b06:	1a f0       	brmi	.+6      	; 0xb0e <__fixunssfsi+0x24>
 b08:	ba 95       	dec	r27
 b0a:	c9 f7       	brne	.-14     	; 0xafe <__fixunssfsi+0x14>
 b0c:	14 c0       	rjmp	.+40     	; 0xb36 <__fixunssfsi+0x4c>
 b0e:	b1 30       	cpi	r27, 0x01	; 1
 b10:	91 f0       	breq	.+36     	; 0xb36 <__fixunssfsi+0x4c>
 b12:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_zero>
 b16:	b1 e0       	ldi	r27, 0x01	; 1
 b18:	08 95       	ret
 b1a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_zero>
 b1e:	67 2f       	mov	r22, r23
 b20:	78 2f       	mov	r23, r24
 b22:	88 27       	eor	r24, r24
 b24:	b8 5f       	subi	r27, 0xF8	; 248
 b26:	39 f0       	breq	.+14     	; 0xb36 <__fixunssfsi+0x4c>
 b28:	b9 3f       	cpi	r27, 0xF9	; 249
 b2a:	cc f3       	brlt	.-14     	; 0xb1e <__fixunssfsi+0x34>
 b2c:	86 95       	lsr	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b3 95       	inc	r27
 b34:	d9 f7       	brne	.-10     	; 0xb2c <__fixunssfsi+0x42>
 b36:	3e f4       	brtc	.+14     	; 0xb46 <__fixunssfsi+0x5c>
 b38:	90 95       	com	r25
 b3a:	80 95       	com	r24
 b3c:	70 95       	com	r23
 b3e:	61 95       	neg	r22
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	08 95       	ret

00000b48 <__floatunsisf>:
 b48:	e8 94       	clt
 b4a:	09 c0       	rjmp	.+18     	; 0xb5e <__floatsisf+0x12>

00000b4c <__floatsisf>:
 b4c:	97 fb       	bst	r25, 7
 b4e:	3e f4       	brtc	.+14     	; 0xb5e <__floatsisf+0x12>
 b50:	90 95       	com	r25
 b52:	80 95       	com	r24
 b54:	70 95       	com	r23
 b56:	61 95       	neg	r22
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	99 23       	and	r25, r25
 b60:	a9 f0       	breq	.+42     	; 0xb8c <__floatsisf+0x40>
 b62:	f9 2f       	mov	r31, r25
 b64:	96 e9       	ldi	r25, 0x96	; 150
 b66:	bb 27       	eor	r27, r27
 b68:	93 95       	inc	r25
 b6a:	f6 95       	lsr	r31
 b6c:	87 95       	ror	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	b7 95       	ror	r27
 b74:	f1 11       	cpse	r31, r1
 b76:	f8 cf       	rjmp	.-16     	; 0xb68 <__floatsisf+0x1c>
 b78:	fa f4       	brpl	.+62     	; 0xbb8 <__floatsisf+0x6c>
 b7a:	bb 0f       	add	r27, r27
 b7c:	11 f4       	brne	.+4      	; 0xb82 <__floatsisf+0x36>
 b7e:	60 ff       	sbrs	r22, 0
 b80:	1b c0       	rjmp	.+54     	; 0xbb8 <__floatsisf+0x6c>
 b82:	6f 5f       	subi	r22, 0xFF	; 255
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	16 c0       	rjmp	.+44     	; 0xbb8 <__floatsisf+0x6c>
 b8c:	88 23       	and	r24, r24
 b8e:	11 f0       	breq	.+4      	; 0xb94 <__floatsisf+0x48>
 b90:	96 e9       	ldi	r25, 0x96	; 150
 b92:	11 c0       	rjmp	.+34     	; 0xbb6 <__floatsisf+0x6a>
 b94:	77 23       	and	r23, r23
 b96:	21 f0       	breq	.+8      	; 0xba0 <__floatsisf+0x54>
 b98:	9e e8       	ldi	r25, 0x8E	; 142
 b9a:	87 2f       	mov	r24, r23
 b9c:	76 2f       	mov	r23, r22
 b9e:	05 c0       	rjmp	.+10     	; 0xbaa <__floatsisf+0x5e>
 ba0:	66 23       	and	r22, r22
 ba2:	71 f0       	breq	.+28     	; 0xbc0 <__floatsisf+0x74>
 ba4:	96 e8       	ldi	r25, 0x86	; 134
 ba6:	86 2f       	mov	r24, r22
 ba8:	70 e0       	ldi	r23, 0x00	; 0
 baa:	60 e0       	ldi	r22, 0x00	; 0
 bac:	2a f0       	brmi	.+10     	; 0xbb8 <__floatsisf+0x6c>
 bae:	9a 95       	dec	r25
 bb0:	66 0f       	add	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	da f7       	brpl	.-10     	; 0xbae <__floatsisf+0x62>
 bb8:	88 0f       	add	r24, r24
 bba:	96 95       	lsr	r25
 bbc:	87 95       	ror	r24
 bbe:	97 f9       	bld	r25, 7
 bc0:	08 95       	ret

00000bc2 <__fp_cmp>:
 bc2:	99 0f       	add	r25, r25
 bc4:	00 08       	sbc	r0, r0
 bc6:	55 0f       	add	r21, r21
 bc8:	aa 0b       	sbc	r26, r26
 bca:	e0 e8       	ldi	r30, 0x80	; 128
 bcc:	fe ef       	ldi	r31, 0xFE	; 254
 bce:	16 16       	cp	r1, r22
 bd0:	17 06       	cpc	r1, r23
 bd2:	e8 07       	cpc	r30, r24
 bd4:	f9 07       	cpc	r31, r25
 bd6:	c0 f0       	brcs	.+48     	; 0xc08 <__fp_cmp+0x46>
 bd8:	12 16       	cp	r1, r18
 bda:	13 06       	cpc	r1, r19
 bdc:	e4 07       	cpc	r30, r20
 bde:	f5 07       	cpc	r31, r21
 be0:	98 f0       	brcs	.+38     	; 0xc08 <__fp_cmp+0x46>
 be2:	62 1b       	sub	r22, r18
 be4:	73 0b       	sbc	r23, r19
 be6:	84 0b       	sbc	r24, r20
 be8:	95 0b       	sbc	r25, r21
 bea:	39 f4       	brne	.+14     	; 0xbfa <__fp_cmp+0x38>
 bec:	0a 26       	eor	r0, r26
 bee:	61 f0       	breq	.+24     	; 0xc08 <__fp_cmp+0x46>
 bf0:	23 2b       	or	r18, r19
 bf2:	24 2b       	or	r18, r20
 bf4:	25 2b       	or	r18, r21
 bf6:	21 f4       	brne	.+8      	; 0xc00 <__fp_cmp+0x3e>
 bf8:	08 95       	ret
 bfa:	0a 26       	eor	r0, r26
 bfc:	09 f4       	brne	.+2      	; 0xc00 <__fp_cmp+0x3e>
 bfe:	a1 40       	sbci	r26, 0x01	; 1
 c00:	a6 95       	lsr	r26
 c02:	8f ef       	ldi	r24, 0xFF	; 255
 c04:	81 1d       	adc	r24, r1
 c06:	81 1d       	adc	r24, r1
 c08:	08 95       	ret

00000c0a <__fp_inf>:
 c0a:	97 f9       	bld	r25, 7
 c0c:	9f 67       	ori	r25, 0x7F	; 127
 c0e:	80 e8       	ldi	r24, 0x80	; 128
 c10:	70 e0       	ldi	r23, 0x00	; 0
 c12:	60 e0       	ldi	r22, 0x00	; 0
 c14:	08 95       	ret

00000c16 <__fp_nan>:
 c16:	9f ef       	ldi	r25, 0xFF	; 255
 c18:	80 ec       	ldi	r24, 0xC0	; 192
 c1a:	08 95       	ret

00000c1c <__fp_pscA>:
 c1c:	00 24       	eor	r0, r0
 c1e:	0a 94       	dec	r0
 c20:	16 16       	cp	r1, r22
 c22:	17 06       	cpc	r1, r23
 c24:	18 06       	cpc	r1, r24
 c26:	09 06       	cpc	r0, r25
 c28:	08 95       	ret

00000c2a <__fp_pscB>:
 c2a:	00 24       	eor	r0, r0
 c2c:	0a 94       	dec	r0
 c2e:	12 16       	cp	r1, r18
 c30:	13 06       	cpc	r1, r19
 c32:	14 06       	cpc	r1, r20
 c34:	05 06       	cpc	r0, r21
 c36:	08 95       	ret

00000c38 <__fp_round>:
 c38:	09 2e       	mov	r0, r25
 c3a:	03 94       	inc	r0
 c3c:	00 0c       	add	r0, r0
 c3e:	11 f4       	brne	.+4      	; 0xc44 <__fp_round+0xc>
 c40:	88 23       	and	r24, r24
 c42:	52 f0       	brmi	.+20     	; 0xc58 <__fp_round+0x20>
 c44:	bb 0f       	add	r27, r27
 c46:	40 f4       	brcc	.+16     	; 0xc58 <__fp_round+0x20>
 c48:	bf 2b       	or	r27, r31
 c4a:	11 f4       	brne	.+4      	; 0xc50 <__fp_round+0x18>
 c4c:	60 ff       	sbrs	r22, 0
 c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__fp_round+0x20>
 c50:	6f 5f       	subi	r22, 0xFF	; 255
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	8f 4f       	sbci	r24, 0xFF	; 255
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__fp_split3>:
 c5a:	57 fd       	sbrc	r21, 7
 c5c:	90 58       	subi	r25, 0x80	; 128
 c5e:	44 0f       	add	r20, r20
 c60:	55 1f       	adc	r21, r21
 c62:	59 f0       	breq	.+22     	; 0xc7a <__fp_splitA+0x10>
 c64:	5f 3f       	cpi	r21, 0xFF	; 255
 c66:	71 f0       	breq	.+28     	; 0xc84 <__fp_splitA+0x1a>
 c68:	47 95       	ror	r20

00000c6a <__fp_splitA>:
 c6a:	88 0f       	add	r24, r24
 c6c:	97 fb       	bst	r25, 7
 c6e:	99 1f       	adc	r25, r25
 c70:	61 f0       	breq	.+24     	; 0xc8a <__fp_splitA+0x20>
 c72:	9f 3f       	cpi	r25, 0xFF	; 255
 c74:	79 f0       	breq	.+30     	; 0xc94 <__fp_splitA+0x2a>
 c76:	87 95       	ror	r24
 c78:	08 95       	ret
 c7a:	12 16       	cp	r1, r18
 c7c:	13 06       	cpc	r1, r19
 c7e:	14 06       	cpc	r1, r20
 c80:	55 1f       	adc	r21, r21
 c82:	f2 cf       	rjmp	.-28     	; 0xc68 <__fp_split3+0xe>
 c84:	46 95       	lsr	r20
 c86:	f1 df       	rcall	.-30     	; 0xc6a <__fp_splitA>
 c88:	08 c0       	rjmp	.+16     	; 0xc9a <__fp_splitA+0x30>
 c8a:	16 16       	cp	r1, r22
 c8c:	17 06       	cpc	r1, r23
 c8e:	18 06       	cpc	r1, r24
 c90:	99 1f       	adc	r25, r25
 c92:	f1 cf       	rjmp	.-30     	; 0xc76 <__fp_splitA+0xc>
 c94:	86 95       	lsr	r24
 c96:	71 05       	cpc	r23, r1
 c98:	61 05       	cpc	r22, r1
 c9a:	08 94       	sec
 c9c:	08 95       	ret

00000c9e <__fp_zero>:
 c9e:	e8 94       	clt

00000ca0 <__fp_szero>:
 ca0:	bb 27       	eor	r27, r27
 ca2:	66 27       	eor	r22, r22
 ca4:	77 27       	eor	r23, r23
 ca6:	cb 01       	movw	r24, r22
 ca8:	97 f9       	bld	r25, 7
 caa:	08 95       	ret

00000cac <__gesf2>:
 cac:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_cmp>
 cb0:	08 f4       	brcc	.+2      	; 0xcb4 <__gesf2+0x8>
 cb2:	8f ef       	ldi	r24, 0xFF	; 255
 cb4:	08 95       	ret

00000cb6 <__mulsf3>:
 cb6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__mulsf3x>
 cba:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__fp_round>
 cbe:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_pscA>
 cc2:	38 f0       	brcs	.+14     	; 0xcd2 <__mulsf3+0x1c>
 cc4:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_pscB>
 cc8:	20 f0       	brcs	.+8      	; 0xcd2 <__mulsf3+0x1c>
 cca:	95 23       	and	r25, r21
 ccc:	11 f0       	breq	.+4      	; 0xcd2 <__mulsf3+0x1c>
 cce:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_inf>
 cd2:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__fp_nan>
 cd6:	11 24       	eor	r1, r1
 cd8:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_szero>

00000cdc <__mulsf3x>:
 cdc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__fp_split3>
 ce0:	70 f3       	brcs	.-36     	; 0xcbe <__mulsf3+0x8>

00000ce2 <__mulsf3_pse>:
 ce2:	95 9f       	mul	r25, r21
 ce4:	c1 f3       	breq	.-16     	; 0xcd6 <__mulsf3+0x20>
 ce6:	95 0f       	add	r25, r21
 ce8:	50 e0       	ldi	r21, 0x00	; 0
 cea:	55 1f       	adc	r21, r21
 cec:	62 9f       	mul	r22, r18
 cee:	f0 01       	movw	r30, r0
 cf0:	72 9f       	mul	r23, r18
 cf2:	bb 27       	eor	r27, r27
 cf4:	f0 0d       	add	r31, r0
 cf6:	b1 1d       	adc	r27, r1
 cf8:	63 9f       	mul	r22, r19
 cfa:	aa 27       	eor	r26, r26
 cfc:	f0 0d       	add	r31, r0
 cfe:	b1 1d       	adc	r27, r1
 d00:	aa 1f       	adc	r26, r26
 d02:	64 9f       	mul	r22, r20
 d04:	66 27       	eor	r22, r22
 d06:	b0 0d       	add	r27, r0
 d08:	a1 1d       	adc	r26, r1
 d0a:	66 1f       	adc	r22, r22
 d0c:	82 9f       	mul	r24, r18
 d0e:	22 27       	eor	r18, r18
 d10:	b0 0d       	add	r27, r0
 d12:	a1 1d       	adc	r26, r1
 d14:	62 1f       	adc	r22, r18
 d16:	73 9f       	mul	r23, r19
 d18:	b0 0d       	add	r27, r0
 d1a:	a1 1d       	adc	r26, r1
 d1c:	62 1f       	adc	r22, r18
 d1e:	83 9f       	mul	r24, r19
 d20:	a0 0d       	add	r26, r0
 d22:	61 1d       	adc	r22, r1
 d24:	22 1f       	adc	r18, r18
 d26:	74 9f       	mul	r23, r20
 d28:	33 27       	eor	r19, r19
 d2a:	a0 0d       	add	r26, r0
 d2c:	61 1d       	adc	r22, r1
 d2e:	23 1f       	adc	r18, r19
 d30:	84 9f       	mul	r24, r20
 d32:	60 0d       	add	r22, r0
 d34:	21 1d       	adc	r18, r1
 d36:	82 2f       	mov	r24, r18
 d38:	76 2f       	mov	r23, r22
 d3a:	6a 2f       	mov	r22, r26
 d3c:	11 24       	eor	r1, r1
 d3e:	9f 57       	subi	r25, 0x7F	; 127
 d40:	50 40       	sbci	r21, 0x00	; 0
 d42:	9a f0       	brmi	.+38     	; 0xd6a <__mulsf3_pse+0x88>
 d44:	f1 f0       	breq	.+60     	; 0xd82 <__mulsf3_pse+0xa0>
 d46:	88 23       	and	r24, r24
 d48:	4a f0       	brmi	.+18     	; 0xd5c <__mulsf3_pse+0x7a>
 d4a:	ee 0f       	add	r30, r30
 d4c:	ff 1f       	adc	r31, r31
 d4e:	bb 1f       	adc	r27, r27
 d50:	66 1f       	adc	r22, r22
 d52:	77 1f       	adc	r23, r23
 d54:	88 1f       	adc	r24, r24
 d56:	91 50       	subi	r25, 0x01	; 1
 d58:	50 40       	sbci	r21, 0x00	; 0
 d5a:	a9 f7       	brne	.-22     	; 0xd46 <__mulsf3_pse+0x64>
 d5c:	9e 3f       	cpi	r25, 0xFE	; 254
 d5e:	51 05       	cpc	r21, r1
 d60:	80 f0       	brcs	.+32     	; 0xd82 <__mulsf3_pse+0xa0>
 d62:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_inf>
 d66:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_szero>
 d6a:	5f 3f       	cpi	r21, 0xFF	; 255
 d6c:	e4 f3       	brlt	.-8      	; 0xd66 <__mulsf3_pse+0x84>
 d6e:	98 3e       	cpi	r25, 0xE8	; 232
 d70:	d4 f3       	brlt	.-12     	; 0xd66 <__mulsf3_pse+0x84>
 d72:	86 95       	lsr	r24
 d74:	77 95       	ror	r23
 d76:	67 95       	ror	r22
 d78:	b7 95       	ror	r27
 d7a:	f7 95       	ror	r31
 d7c:	e7 95       	ror	r30
 d7e:	9f 5f       	subi	r25, 0xFF	; 255
 d80:	c1 f7       	brne	.-16     	; 0xd72 <__mulsf3_pse+0x90>
 d82:	fe 2b       	or	r31, r30
 d84:	88 0f       	add	r24, r24
 d86:	91 1d       	adc	r25, r1
 d88:	96 95       	lsr	r25
 d8a:	87 95       	ror	r24
 d8c:	97 f9       	bld	r25, 7
 d8e:	08 95       	ret

00000d90 <_exit>:
 d90:	f8 94       	cli

00000d92 <__stop_program>:
 d92:	ff cf       	rjmp	.-2      	; 0xd92 <__stop_program>


story1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000228  00800100  00000d5c  00000dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7e  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008df  00000000  00000000  00001c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000894  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000236  00000000  00000000  0000335f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 56 06 	call	0xcac	; 0xcac <main>
  8e:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mul2>:
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};


uint8_t mul2(uint8_t a) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	89 83       	std	Y+1, r24	; 0x01
	return (a&0x80)?((a<<1)^0x1b):(a<<1);
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	88 23       	and	r24, r24
  a6:	4c f4       	brge	.+18     	; 0xba <mul2+0x24>
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	98 2f       	mov	r25, r24
  b4:	8b e1       	ldi	r24, 0x1B	; 27
  b6:	89 27       	eor	r24, r25
  b8:	02 c0       	rjmp	.+4      	; 0xbe <mul2+0x28>
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	88 0f       	add	r24, r24
}
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <inv_shift_rows>:

void inv_shift_rows(uint8_t *state) {
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <inv_shift_rows+0x6>
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	9b 83       	std	Y+3, r25	; 0x03
  d4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	9b 81       	ldd	r25, Y+3	; 0x03
  da:	fc 01       	movw	r30, r24
  dc:	85 85       	ldd	r24, Z+13	; 0x0d
  de:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	9b 81       	ldd	r25, Y+3	; 0x03
  e4:	0d 96       	adiw	r24, 0x0d	; 13
  e6:	2a 81       	ldd	r18, Y+2	; 0x02
  e8:	3b 81       	ldd	r19, Y+3	; 0x03
  ea:	f9 01       	movw	r30, r18
  ec:	21 85       	ldd	r18, Z+9	; 0x09
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	9b 81       	ldd	r25, Y+3	; 0x03
  f6:	09 96       	adiw	r24, 0x09	; 9
  f8:	2a 81       	ldd	r18, Y+2	; 0x02
  fa:	3b 81       	ldd	r19, Y+3	; 0x03
  fc:	f9 01       	movw	r30, r18
  fe:	25 81       	ldd	r18, Z+5	; 0x05
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	9b 81       	ldd	r25, Y+3	; 0x03
 108:	05 96       	adiw	r24, 0x05	; 5
 10a:	2a 81       	ldd	r18, Y+2	; 0x02
 10c:	3b 81       	ldd	r19, Y+3	; 0x03
 10e:	f9 01       	movw	r30, r18
 110:	21 81       	ldd	r18, Z+1	; 0x01
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
    *(state+1)  = temp;
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	9b 81       	ldd	r25, Y+3	; 0x03
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	9b 81       	ldd	r25, Y+3	; 0x03
 126:	fc 01       	movw	r30, r24
 128:	86 85       	ldd	r24, Z+14	; 0x0e
 12a:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	9b 81       	ldd	r25, Y+3	; 0x03
 130:	0e 96       	adiw	r24, 0x0e	; 14
 132:	2a 81       	ldd	r18, Y+2	; 0x02
 134:	3b 81       	ldd	r19, Y+3	; 0x03
 136:	f9 01       	movw	r30, r18
 138:	26 81       	ldd	r18, Z+6	; 0x06
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
    *(state+6)  = temp;
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	9b 81       	ldd	r25, Y+3	; 0x03
 142:	06 96       	adiw	r24, 0x06	; 6
 144:	29 81       	ldd	r18, Y+1	; 0x01
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
    temp        = *(state+10);
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	9b 81       	ldd	r25, Y+3	; 0x03
 14e:	fc 01       	movw	r30, r24
 150:	82 85       	ldd	r24, Z+10	; 0x0a
 152:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	9b 81       	ldd	r25, Y+3	; 0x03
 158:	0a 96       	adiw	r24, 0x0a	; 10
 15a:	2a 81       	ldd	r18, Y+2	; 0x02
 15c:	3b 81       	ldd	r19, Y+3	; 0x03
 15e:	f9 01       	movw	r30, r18
 160:	22 81       	ldd	r18, Z+2	; 0x02
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
    *(state+2)  = temp;
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	9b 81       	ldd	r25, Y+3	; 0x03
 16a:	02 96       	adiw	r24, 0x02	; 2
 16c:	29 81       	ldd	r18, Y+1	; 0x01
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	9b 81       	ldd	r25, Y+3	; 0x03
 176:	fc 01       	movw	r30, r24
 178:	83 81       	ldd	r24, Z+3	; 0x03
 17a:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	9b 81       	ldd	r25, Y+3	; 0x03
 180:	03 96       	adiw	r24, 0x03	; 3
 182:	2a 81       	ldd	r18, Y+2	; 0x02
 184:	3b 81       	ldd	r19, Y+3	; 0x03
 186:	f9 01       	movw	r30, r18
 188:	27 81       	ldd	r18, Z+7	; 0x07
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	9b 81       	ldd	r25, Y+3	; 0x03
 192:	07 96       	adiw	r24, 0x07	; 7
 194:	2a 81       	ldd	r18, Y+2	; 0x02
 196:	3b 81       	ldd	r19, Y+3	; 0x03
 198:	f9 01       	movw	r30, r18
 19a:	23 85       	ldd	r18, Z+11	; 0x0b
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	9b 81       	ldd	r25, Y+3	; 0x03
 1a4:	0b 96       	adiw	r24, 0x0b	; 11
 1a6:	2a 81       	ldd	r18, Y+2	; 0x02
 1a8:	3b 81       	ldd	r19, Y+3	; 0x03
 1aa:	f9 01       	movw	r30, r18
 1ac:	27 85       	ldd	r18, Z+15	; 0x0f
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
    *(state+15) = temp;
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	9b 81       	ldd	r25, Y+3	; 0x03
 1b6:	0f 96       	adiw	r24, 0x0f	; 15
 1b8:	29 81       	ldd	r18, Y+1	; 0x01
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
	
}
 1be:	00 00       	nop
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <aes_decrypt_128>:
void aes_decrypt_128(uint8_t *roundkeys, uint8_t *ciphertext, uint8_t *plaintext) {
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	6d 97       	sbiw	r28, 0x1d	; 29
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	99 8f       	std	Y+25, r25	; 0x19
 1e8:	88 8f       	std	Y+24, r24	; 0x18
 1ea:	7b 8f       	std	Y+27, r23	; 0x1b
 1ec:	6a 8f       	std	Y+26, r22	; 0x1a
 1ee:	5d 8f       	std	Y+29, r21	; 0x1d
 1f0:	4c 8f       	std	Y+28, r20	; 0x1c

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
 1f2:	88 8d       	ldd	r24, Y+24	; 0x18
 1f4:	99 8d       	ldd	r25, Y+25	; 0x19
 1f6:	80 56       	subi	r24, 0x60	; 96
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	99 8f       	std	Y+25, r25	; 0x19
 1fc:	88 8f       	std	Y+24, r24	; 0x18

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 1fe:	19 82       	std	Y+1, r1	; 0x01
 200:	1f c0       	rjmp	.+62     	; 0x240 <aes_decrypt_128+0x74>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	2c 8d       	ldd	r18, Y+28	; 0x1c
 20a:	3d 8d       	ldd	r19, Y+29	; 0x1d
 20c:	82 0f       	add	r24, r18
 20e:	93 1f       	adc	r25, r19
 210:	29 81       	ldd	r18, Y+1	; 0x01
 212:	22 2f       	mov	r18, r18
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	4a 8d       	ldd	r20, Y+26	; 0x1a
 218:	5b 8d       	ldd	r21, Y+27	; 0x1b
 21a:	24 0f       	add	r18, r20
 21c:	35 1f       	adc	r19, r21
 21e:	f9 01       	movw	r30, r18
 220:	60 81       	ld	r22, Z
 222:	29 81       	ldd	r18, Y+1	; 0x01
 224:	22 2f       	mov	r18, r18
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	48 8d       	ldd	r20, Y+24	; 0x18
 22a:	59 8d       	ldd	r21, Y+25	; 0x19
 22c:	24 0f       	add	r18, r20
 22e:	35 1f       	adc	r19, r21
 230:	f9 01       	movw	r30, r18
 232:	20 81       	ld	r18, Z
 234:	26 27       	eor	r18, r22
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
    uint8_t i, j;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	89 83       	std	Y+1, r24	; 0x01
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 31       	cpi	r24, 0x10	; 16
 244:	f0 f2       	brcs	.-68     	; 0x202 <aes_decrypt_128+0x36>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
 246:	88 8d       	ldd	r24, Y+24	; 0x18
 248:	99 8d       	ldd	r25, Y+25	; 0x19
 24a:	40 97       	sbiw	r24, 0x10	; 16
 24c:	99 8f       	std	Y+25, r25	; 0x19
 24e:	88 8f       	std	Y+24, r24	; 0x18
    inv_shift_rows(plaintext);
 250:	8c 8d       	ldd	r24, Y+28	; 0x1c
 252:	9d 8d       	ldd	r25, Y+29	; 0x1d
 254:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 258:	19 82       	std	Y+1, r1	; 0x01
 25a:	1b c0       	rjmp	.+54     	; 0x292 <aes_decrypt_128+0xc6>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2c 8d       	ldd	r18, Y+28	; 0x1c
 264:	3d 8d       	ldd	r19, Y+29	; 0x1d
 266:	82 0f       	add	r24, r18
 268:	93 1f       	adc	r25, r19
 26a:	29 81       	ldd	r18, Y+1	; 0x01
 26c:	22 2f       	mov	r18, r18
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	4c 8d       	ldd	r20, Y+28	; 0x1c
 272:	5d 8d       	ldd	r21, Y+29	; 0x1d
 274:	24 0f       	add	r18, r20
 276:	35 1f       	adc	r19, r21
 278:	f9 01       	movw	r30, r18
 27a:	20 81       	ld	r18, Z
 27c:	22 2f       	mov	r18, r18
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	20 50       	subi	r18, 0x00	; 0
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	80 31       	cpi	r24, 0x10	; 16
 296:	10 f3       	brcs	.-60     	; 0x25c <aes_decrypt_128+0x90>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	8a 83       	std	Y+2, r24	; 0x02
 29c:	96 c1       	rjmp	.+812    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 29e:	19 82       	std	Y+1, r1	; 0x01
 2a0:	20 c0       	rjmp	.+64     	; 0x2e2 <aes_decrypt_128+0x116>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9e 01       	movw	r18, r28
 2aa:	28 5f       	subi	r18, 0xF8	; 248
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
 2ae:	82 0f       	add	r24, r18
 2b0:	93 1f       	adc	r25, r19
 2b2:	29 81       	ldd	r18, Y+1	; 0x01
 2b4:	22 2f       	mov	r18, r18
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	4c 8d       	ldd	r20, Y+28	; 0x1c
 2ba:	5d 8d       	ldd	r21, Y+29	; 0x1d
 2bc:	24 0f       	add	r18, r20
 2be:	35 1f       	adc	r19, r21
 2c0:	f9 01       	movw	r30, r18
 2c2:	60 81       	ld	r22, Z
 2c4:	29 81       	ldd	r18, Y+1	; 0x01
 2c6:	22 2f       	mov	r18, r18
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	48 8d       	ldd	r20, Y+24	; 0x18
 2cc:	59 8d       	ldd	r21, Y+25	; 0x19
 2ce:	24 0f       	add	r18, r20
 2d0:	35 1f       	adc	r19, r21
 2d2:	f9 01       	movw	r30, r18
 2d4:	20 81       	ld	r18, Z
 2d6:	26 27       	eor	r18, r22
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	89 83       	std	Y+1, r24	; 0x01
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	80 31       	cpi	r24, 0x10	; 16
 2e6:	e8 f2       	brcs	.-70     	; 0x2a2 <aes_decrypt_128+0xd6>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 2e8:	19 82       	std	Y+1, r1	; 0x01
 2ea:	3f c1       	rjmp	.+638    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	88 2f       	mov	r24, r24
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	9e 01       	movw	r18, r28
 2f4:	28 5f       	subi	r18, 0xF8	; 248
 2f6:	3f 4f       	sbci	r19, 0xFF	; 255
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	fc 01       	movw	r30, r24
 2fe:	40 81       	ld	r20, Z
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	9e 01       	movw	r18, r28
 30a:	28 5f       	subi	r18, 0xF8	; 248
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	82 0f       	add	r24, r18
 310:	93 1f       	adc	r25, r19
 312:	fc 01       	movw	r30, r24
 314:	80 81       	ld	r24, Z
 316:	48 27       	eor	r20, r24
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	88 2f       	mov	r24, r24
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 96       	adiw	r24, 0x02	; 2
 320:	9e 01       	movw	r18, r28
 322:	28 5f       	subi	r18, 0xF8	; 248
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	82 0f       	add	r24, r18
 328:	93 1f       	adc	r25, r19
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	48 27       	eor	r20, r24
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	03 96       	adiw	r24, 0x03	; 3
 338:	9e 01       	movw	r18, r28
 33a:	28 5f       	subi	r18, 0xF8	; 248
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	82 0f       	add	r24, r18
 340:	93 1f       	adc	r25, r19
 342:	fc 01       	movw	r30, r24
 344:	80 81       	ld	r24, Z
 346:	84 27       	eor	r24, r20
 348:	8c 83       	std	Y+4, r24	; 0x04
			uint8_t z = 0;
 34a:	1b 82       	std	Y+3, r1	; 0x03
			uint8_t x = 0;
 34c:	1d 82       	std	Y+5, r1	; 0x05
			while(z<3)
 34e:	37 c0       	rjmp	.+110    	; 0x3be <aes_decrypt_128+0x1f2>
			{
				x=i+z;
 350:	99 81       	ldd	r25, Y+1	; 0x01
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	89 0f       	add	r24, r25
 356:	8d 83       	std	Y+5, r24	; 0x05
				plaintext[x]   = t ^ tmp[x]   ^ mul2(tmp[x]   ^ tmp[x+1]);
 358:	8d 81       	ldd	r24, Y+5	; 0x05
 35a:	88 2f       	mov	r24, r24
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	2c 8d       	ldd	r18, Y+28	; 0x1c
 360:	3d 8d       	ldd	r19, Y+29	; 0x1d
 362:	89 01       	movw	r16, r18
 364:	08 0f       	add	r16, r24
 366:	19 1f       	adc	r17, r25
 368:	8d 81       	ldd	r24, Y+5	; 0x05
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	9e 01       	movw	r18, r28
 370:	28 5f       	subi	r18, 0xF8	; 248
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	82 0f       	add	r24, r18
 376:	93 1f       	adc	r25, r19
 378:	fc 01       	movw	r30, r24
 37a:	90 81       	ld	r25, Z
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	f9 2e       	mov	r15, r25
 380:	f8 26       	eor	r15, r24
 382:	8d 81       	ldd	r24, Y+5	; 0x05
 384:	88 2f       	mov	r24, r24
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	9e 01       	movw	r18, r28
 38a:	28 5f       	subi	r18, 0xF8	; 248
 38c:	3f 4f       	sbci	r19, 0xFF	; 255
 38e:	82 0f       	add	r24, r18
 390:	93 1f       	adc	r25, r19
 392:	fc 01       	movw	r30, r24
 394:	40 81       	ld	r20, Z
 396:	8d 81       	ldd	r24, Y+5	; 0x05
 398:	88 2f       	mov	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	9e 01       	movw	r18, r28
 3a0:	28 5f       	subi	r18, 0xF8	; 248
 3a2:	3f 4f       	sbci	r19, 0xFF	; 255
 3a4:	82 0f       	add	r24, r18
 3a6:	93 1f       	adc	r25, r19
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 81       	ld	r24, Z
 3ac:	84 27       	eor	r24, r20
 3ae:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3b2:	8f 25       	eor	r24, r15
 3b4:	f8 01       	movw	r30, r16
 3b6:	80 83       	st	Z, r24
				z++;
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	8b 83       	std	Y+3, r24	; 0x03
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
			uint8_t z = 0;
			uint8_t x = 0;
			while(z<3)
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	30 f2       	brcs	.-116    	; 0x350 <aes_decrypt_128+0x184>
			{
				x=i+z;
				plaintext[x]   = t ^ tmp[x]   ^ mul2(tmp[x]   ^ tmp[x+1]);
				z++;
			}
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	03 96       	adiw	r24, 0x03	; 3
 3cc:	2c 8d       	ldd	r18, Y+28	; 0x1c
 3ce:	3d 8d       	ldd	r19, Y+29	; 0x1d
 3d0:	89 01       	movw	r16, r18
 3d2:	08 0f       	add	r16, r24
 3d4:	19 1f       	adc	r17, r25
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	03 96       	adiw	r24, 0x03	; 3
 3de:	9e 01       	movw	r18, r28
 3e0:	28 5f       	subi	r18, 0xF8	; 248
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
 3e4:	82 0f       	add	r24, r18
 3e6:	93 1f       	adc	r25, r19
 3e8:	fc 01       	movw	r30, r24
 3ea:	90 81       	ld	r25, Z
 3ec:	8c 81       	ldd	r24, Y+4	; 0x04
 3ee:	f9 2e       	mov	r15, r25
 3f0:	f8 26       	eor	r15, r24
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	03 96       	adiw	r24, 0x03	; 3
 3fa:	9e 01       	movw	r18, r28
 3fc:	28 5f       	subi	r18, 0xF8	; 248
 3fe:	3f 4f       	sbci	r19, 0xFF	; 255
 400:	82 0f       	add	r24, r18
 402:	93 1f       	adc	r25, r19
 404:	fc 01       	movw	r30, r24
 406:	40 81       	ld	r20, Z
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	88 2f       	mov	r24, r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	9e 01       	movw	r18, r28
 410:	28 5f       	subi	r18, 0xF8	; 248
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	fc 01       	movw	r30, r24
 41a:	80 81       	ld	r24, Z
 41c:	84 27       	eor	r24, r20
 41e:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 422:	8f 25       	eor	r24, r15
 424:	f8 01       	movw	r30, r16
 426:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	9e 01       	movw	r18, r28
 430:	28 5f       	subi	r18, 0xF8	; 248
 432:	3f 4f       	sbci	r19, 0xFF	; 255
 434:	82 0f       	add	r24, r18
 436:	93 1f       	adc	r25, r19
 438:	fc 01       	movw	r30, r24
 43a:	40 81       	ld	r20, Z
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	88 2f       	mov	r24, r24
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 96       	adiw	r24, 0x02	; 2
 444:	9e 01       	movw	r18, r28
 446:	28 5f       	subi	r18, 0xF8	; 248
 448:	3f 4f       	sbci	r19, 0xFF	; 255
 44a:	82 0f       	add	r24, r18
 44c:	93 1f       	adc	r25, r19
 44e:	fc 01       	movw	r30, r24
 450:	80 81       	ld	r24, Z
 452:	84 27       	eor	r24, r20
 454:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 458:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 45c:	8e 83       	std	Y+6, r24	; 0x06
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	88 2f       	mov	r24, r24
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	9e 01       	movw	r18, r28
 468:	28 5f       	subi	r18, 0xF8	; 248
 46a:	3f 4f       	sbci	r19, 0xFF	; 255
 46c:	82 0f       	add	r24, r18
 46e:	93 1f       	adc	r25, r19
 470:	fc 01       	movw	r30, r24
 472:	40 81       	ld	r20, Z
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	88 2f       	mov	r24, r24
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	03 96       	adiw	r24, 0x03	; 3
 47c:	9e 01       	movw	r18, r28
 47e:	28 5f       	subi	r18, 0xF8	; 248
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	fc 01       	movw	r30, r24
 488:	80 81       	ld	r24, Z
 48a:	84 27       	eor	r24, r20
 48c:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 490:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 494:	8f 83       	std	Y+7, r24	; 0x07
            t = mul2(u ^ v);
 496:	9e 81       	ldd	r25, Y+6	; 0x06
 498:	8f 81       	ldd	r24, Y+7	; 0x07
 49a:	89 27       	eor	r24, r25
 49c:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 4a0:	8c 83       	std	Y+4, r24	; 0x04
            plaintext[i]   ^= (t ^ u);
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	88 2f       	mov	r24, r24
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	2c 8d       	ldd	r18, Y+28	; 0x1c
 4aa:	3d 8d       	ldd	r19, Y+29	; 0x1d
 4ac:	82 0f       	add	r24, r18
 4ae:	93 1f       	adc	r25, r19
 4b0:	29 81       	ldd	r18, Y+1	; 0x01
 4b2:	22 2f       	mov	r18, r18
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	4c 8d       	ldd	r20, Y+28	; 0x1c
 4b8:	5d 8d       	ldd	r21, Y+29	; 0x1d
 4ba:	24 0f       	add	r18, r20
 4bc:	35 1f       	adc	r19, r21
 4be:	f9 01       	movw	r30, r18
 4c0:	30 81       	ld	r19, Z
 4c2:	4c 81       	ldd	r20, Y+4	; 0x04
 4c4:	2e 81       	ldd	r18, Y+6	; 0x06
 4c6:	24 27       	eor	r18, r20
 4c8:	23 27       	eor	r18, r19
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
            plaintext[i+1] ^= (t ^ v);
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	2c 8d       	ldd	r18, Y+28	; 0x1c
 4d8:	3d 8d       	ldd	r19, Y+29	; 0x1d
 4da:	82 0f       	add	r24, r18
 4dc:	93 1f       	adc	r25, r19
 4de:	29 81       	ldd	r18, Y+1	; 0x01
 4e0:	22 2f       	mov	r18, r18
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	2f 5f       	subi	r18, 0xFF	; 255
 4e6:	3f 4f       	sbci	r19, 0xFF	; 255
 4e8:	4c 8d       	ldd	r20, Y+28	; 0x1c
 4ea:	5d 8d       	ldd	r21, Y+29	; 0x1d
 4ec:	24 0f       	add	r18, r20
 4ee:	35 1f       	adc	r19, r21
 4f0:	f9 01       	movw	r30, r18
 4f2:	30 81       	ld	r19, Z
 4f4:	4c 81       	ldd	r20, Y+4	; 0x04
 4f6:	2f 81       	ldd	r18, Y+7	; 0x07
 4f8:	24 27       	eor	r18, r20
 4fa:	23 27       	eor	r18, r19
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
            plaintext[i+2] ^= (t ^ u);
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 96       	adiw	r24, 0x02	; 2
 508:	2c 8d       	ldd	r18, Y+28	; 0x1c
 50a:	3d 8d       	ldd	r19, Y+29	; 0x1d
 50c:	82 0f       	add	r24, r18
 50e:	93 1f       	adc	r25, r19
 510:	29 81       	ldd	r18, Y+1	; 0x01
 512:	22 2f       	mov	r18, r18
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	2e 5f       	subi	r18, 0xFE	; 254
 518:	3f 4f       	sbci	r19, 0xFF	; 255
 51a:	4c 8d       	ldd	r20, Y+28	; 0x1c
 51c:	5d 8d       	ldd	r21, Y+29	; 0x1d
 51e:	24 0f       	add	r18, r20
 520:	35 1f       	adc	r19, r21
 522:	f9 01       	movw	r30, r18
 524:	30 81       	ld	r19, Z
 526:	4c 81       	ldd	r20, Y+4	; 0x04
 528:	2e 81       	ldd	r18, Y+6	; 0x06
 52a:	24 27       	eor	r18, r20
 52c:	23 27       	eor	r18, r19
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
            plaintext[i+3] ^= (t ^ v);
 532:	89 81       	ldd	r24, Y+1	; 0x01
 534:	88 2f       	mov	r24, r24
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	03 96       	adiw	r24, 0x03	; 3
 53a:	2c 8d       	ldd	r18, Y+28	; 0x1c
 53c:	3d 8d       	ldd	r19, Y+29	; 0x1d
 53e:	82 0f       	add	r24, r18
 540:	93 1f       	adc	r25, r19
 542:	29 81       	ldd	r18, Y+1	; 0x01
 544:	22 2f       	mov	r18, r18
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	2d 5f       	subi	r18, 0xFD	; 253
 54a:	3f 4f       	sbci	r19, 0xFF	; 255
 54c:	4c 8d       	ldd	r20, Y+28	; 0x1c
 54e:	5d 8d       	ldd	r21, Y+29	; 0x1d
 550:	24 0f       	add	r18, r20
 552:	35 1f       	adc	r19, r21
 554:	f9 01       	movw	r30, r18
 556:	30 81       	ld	r19, Z
 558:	4c 81       	ldd	r20, Y+4	; 0x04
 55a:	2f 81       	ldd	r18, Y+7	; 0x07
 55c:	24 27       	eor	r18, r20
 55e:	23 27       	eor	r18, r19
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	8c 5f       	subi	r24, 0xFC	; 252
 568:	89 83       	std	Y+1, r24	; 0x01
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	80 31       	cpi	r24, 0x10	; 16
 56e:	08 f4       	brcc	.+2      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 570:	bd ce       	rjmp	.-646    	; 0x2ec <aes_decrypt_128+0x120>
            plaintext[i+2] ^= (t ^ u);
            plaintext[i+3] ^= (t ^ v);
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
 572:	8c 8d       	ldd	r24, Y+28	; 0x1c
 574:	9d 8d       	ldd	r25, Y+29	; 0x1d
 576:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 57a:	19 82       	std	Y+1, r1	; 0x01
 57c:	1b c0       	rjmp	.+54     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	88 2f       	mov	r24, r24
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	2c 8d       	ldd	r18, Y+28	; 0x1c
 586:	3d 8d       	ldd	r19, Y+29	; 0x1d
 588:	82 0f       	add	r24, r18
 58a:	93 1f       	adc	r25, r19
 58c:	29 81       	ldd	r18, Y+1	; 0x01
 58e:	22 2f       	mov	r18, r18
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	4c 8d       	ldd	r20, Y+28	; 0x1c
 594:	5d 8d       	ldd	r21, Y+29	; 0x1d
 596:	24 0f       	add	r18, r20
 598:	35 1f       	adc	r19, r21
 59a:	f9 01       	movw	r30, r18
 59c:	20 81       	ld	r18, Z
 59e:	22 2f       	mov	r18, r18
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	20 50       	subi	r18, 0x00	; 0
 5a4:	3f 4f       	sbci	r19, 0xFF	; 255
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	89 83       	std	Y+1, r24	; 0x01
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	80 31       	cpi	r24, 0x10	; 16
 5b8:	10 f3       	brcs	.-60     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
 5ba:	88 8d       	ldd	r24, Y+24	; 0x18
 5bc:	99 8d       	ldd	r25, Y+25	; 0x19
 5be:	40 97       	sbiw	r24, 0x10	; 16
 5c0:	99 8f       	std	Y+25, r25	; 0x19
 5c2:	88 8f       	std	Y+24, r24	; 0x18
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	8a 83       	std	Y+2, r24	; 0x02
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	8a 30       	cpi	r24, 0x0A	; 10
 5ce:	08 f4       	brcc	.+2      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5d0:	66 ce       	rjmp	.-820    	; 0x29e <aes_decrypt_128+0xd2>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 5d2:	19 82       	std	Y+1, r1	; 0x01
 5d4:	1f c0       	rjmp	.+62     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
        *(plaintext+i) ^= *(roundkeys+i);
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	88 2f       	mov	r24, r24
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	2c 8d       	ldd	r18, Y+28	; 0x1c
 5de:	3d 8d       	ldd	r19, Y+29	; 0x1d
 5e0:	82 0f       	add	r24, r18
 5e2:	93 1f       	adc	r25, r19
 5e4:	29 81       	ldd	r18, Y+1	; 0x01
 5e6:	22 2f       	mov	r18, r18
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	4c 8d       	ldd	r20, Y+28	; 0x1c
 5ec:	5d 8d       	ldd	r21, Y+29	; 0x1d
 5ee:	24 0f       	add	r18, r20
 5f0:	35 1f       	adc	r19, r21
 5f2:	f9 01       	movw	r30, r18
 5f4:	60 81       	ld	r22, Z
 5f6:	29 81       	ldd	r18, Y+1	; 0x01
 5f8:	22 2f       	mov	r18, r18
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	48 8d       	ldd	r20, Y+24	; 0x18
 5fe:	59 8d       	ldd	r21, Y+25	; 0x19
 600:	24 0f       	add	r18, r20
 602:	35 1f       	adc	r19, r21
 604:	f9 01       	movw	r30, r18
 606:	20 81       	ld	r18, Z
 608:	26 27       	eor	r18, r22
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	8f 5f       	subi	r24, 0xFF	; 255
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	80 31       	cpi	r24, 0x10	; 16
 618:	f0 f2       	brcs	.-68     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
        *(plaintext+i) ^= *(roundkeys+i);
    }

 61a:	00 00       	nop
 61c:	6d 96       	adiw	r28, 0x1d	; 29
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	08 95       	ret

00000634 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
void shift_rows(uint8_t *state) {
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 d0       	rcall	.+0      	; 0x63a <shift_rows+0x6>
 63a:	1f 92       	push	r1
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	9b 83       	std	Y+3, r25	; 0x03
 642:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+1);
 644:	8a 81       	ldd	r24, Y+2	; 0x02
 646:	9b 81       	ldd	r25, Y+3	; 0x03
 648:	fc 01       	movw	r30, r24
 64a:	81 81       	ldd	r24, Z+1	; 0x01
 64c:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	9b 81       	ldd	r25, Y+3	; 0x03
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	2a 81       	ldd	r18, Y+2	; 0x02
 656:	3b 81       	ldd	r19, Y+3	; 0x03
 658:	f9 01       	movw	r30, r18
 65a:	25 81       	ldd	r18, Z+5	; 0x05
 65c:	fc 01       	movw	r30, r24
 65e:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
 660:	8a 81       	ldd	r24, Y+2	; 0x02
 662:	9b 81       	ldd	r25, Y+3	; 0x03
 664:	05 96       	adiw	r24, 0x05	; 5
 666:	2a 81       	ldd	r18, Y+2	; 0x02
 668:	3b 81       	ldd	r19, Y+3	; 0x03
 66a:	f9 01       	movw	r30, r18
 66c:	21 85       	ldd	r18, Z+9	; 0x09
 66e:	fc 01       	movw	r30, r24
 670:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	9b 81       	ldd	r25, Y+3	; 0x03
 676:	09 96       	adiw	r24, 0x09	; 9
 678:	2a 81       	ldd	r18, Y+2	; 0x02
 67a:	3b 81       	ldd	r19, Y+3	; 0x03
 67c:	f9 01       	movw	r30, r18
 67e:	25 85       	ldd	r18, Z+13	; 0x0d
 680:	fc 01       	movw	r30, r24
 682:	20 83       	st	Z, r18
    *(state+13) = temp;
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	9b 81       	ldd	r25, Y+3	; 0x03
 688:	0d 96       	adiw	r24, 0x0d	; 13
 68a:	29 81       	ldd	r18, Y+1	; 0x01
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	9b 81       	ldd	r25, Y+3	; 0x03
 694:	fc 01       	movw	r30, r24
 696:	82 81       	ldd	r24, Z+2	; 0x02
 698:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	9b 81       	ldd	r25, Y+3	; 0x03
 69e:	02 96       	adiw	r24, 0x02	; 2
 6a0:	2a 81       	ldd	r18, Y+2	; 0x02
 6a2:	3b 81       	ldd	r19, Y+3	; 0x03
 6a4:	f9 01       	movw	r30, r18
 6a6:	22 85       	ldd	r18, Z+10	; 0x0a
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 83       	st	Z, r18
    *(state+10) = temp;
 6ac:	8a 81       	ldd	r24, Y+2	; 0x02
 6ae:	9b 81       	ldd	r25, Y+3	; 0x03
 6b0:	0a 96       	adiw	r24, 0x0a	; 10
 6b2:	29 81       	ldd	r18, Y+1	; 0x01
 6b4:	fc 01       	movw	r30, r24
 6b6:	20 83       	st	Z, r18
    temp        = *(state+6);
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	9b 81       	ldd	r25, Y+3	; 0x03
 6bc:	fc 01       	movw	r30, r24
 6be:	86 81       	ldd	r24, Z+6	; 0x06
 6c0:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	9b 81       	ldd	r25, Y+3	; 0x03
 6c6:	06 96       	adiw	r24, 0x06	; 6
 6c8:	2a 81       	ldd	r18, Y+2	; 0x02
 6ca:	3b 81       	ldd	r19, Y+3	; 0x03
 6cc:	f9 01       	movw	r30, r18
 6ce:	26 85       	ldd	r18, Z+14	; 0x0e
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18
    *(state+14) = temp;
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	9b 81       	ldd	r25, Y+3	; 0x03
 6d8:	0e 96       	adiw	r24, 0x0e	; 14
 6da:	29 81       	ldd	r18, Y+1	; 0x01
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
 6e0:	8a 81       	ldd	r24, Y+2	; 0x02
 6e2:	9b 81       	ldd	r25, Y+3	; 0x03
 6e4:	fc 01       	movw	r30, r24
 6e6:	87 85       	ldd	r24, Z+15	; 0x0f
 6e8:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	9b 81       	ldd	r25, Y+3	; 0x03
 6ee:	0f 96       	adiw	r24, 0x0f	; 15
 6f0:	2a 81       	ldd	r18, Y+2	; 0x02
 6f2:	3b 81       	ldd	r19, Y+3	; 0x03
 6f4:	f9 01       	movw	r30, r18
 6f6:	23 85       	ldd	r18, Z+11	; 0x0b
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	9b 81       	ldd	r25, Y+3	; 0x03
 700:	0b 96       	adiw	r24, 0x0b	; 11
 702:	2a 81       	ldd	r18, Y+2	; 0x02
 704:	3b 81       	ldd	r19, Y+3	; 0x03
 706:	f9 01       	movw	r30, r18
 708:	27 81       	ldd	r18, Z+7	; 0x07
 70a:	fc 01       	movw	r30, r24
 70c:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
 710:	9b 81       	ldd	r25, Y+3	; 0x03
 712:	07 96       	adiw	r24, 0x07	; 7
 714:	2a 81       	ldd	r18, Y+2	; 0x02
 716:	3b 81       	ldd	r19, Y+3	; 0x03
 718:	f9 01       	movw	r30, r18
 71a:	23 81       	ldd	r18, Z+3	; 0x03
 71c:	fc 01       	movw	r30, r24
 71e:	20 83       	st	Z, r18
    *(state+3)  = temp;
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	9b 81       	ldd	r25, Y+3	; 0x03
 724:	03 96       	adiw	r24, 0x03	; 3
 726:	29 81       	ldd	r18, Y+1	; 0x01
 728:	fc 01       	movw	r30, r24
 72a:	20 83       	st	Z, r18
}
 72c:	00 00       	nop
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <aes_encrypt_128>:

void aes_encrypt_128(uint8_t *roundkeys, uint8_t *plaintext, uint8_t *ciphertext) {
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
 746:	69 97       	sbiw	r28, 0x19	; 25
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	f8 94       	cli
 74c:	de bf       	out	0x3e, r29	; 62
 74e:	0f be       	out	0x3f, r0	; 63
 750:	cd bf       	out	0x3d, r28	; 61
 752:	9d 8b       	std	Y+21, r25	; 0x15
 754:	8c 8b       	std	Y+20, r24	; 0x14
 756:	7f 8b       	std	Y+23, r23	; 0x17
 758:	6e 8b       	std	Y+22, r22	; 0x16
 75a:	59 8f       	std	Y+25, r21	; 0x19
 75c:	48 8f       	std	Y+24, r20	; 0x18

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 75e:	19 82       	std	Y+1, r1	; 0x01
 760:	1f c0       	rjmp	.+62     	; 0x7a0 <aes_encrypt_128+0x66>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	88 2f       	mov	r24, r24
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	28 8d       	ldd	r18, Y+24	; 0x18
 76a:	39 8d       	ldd	r19, Y+25	; 0x19
 76c:	28 0f       	add	r18, r24
 76e:	39 1f       	adc	r19, r25
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	88 2f       	mov	r24, r24
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	4e 89       	ldd	r20, Y+22	; 0x16
 778:	5f 89       	ldd	r21, Y+23	; 0x17
 77a:	84 0f       	add	r24, r20
 77c:	95 1f       	adc	r25, r21
 77e:	fc 01       	movw	r30, r24
 780:	60 81       	ld	r22, Z
 782:	8c 89       	ldd	r24, Y+20	; 0x14
 784:	9d 89       	ldd	r25, Y+21	; 0x15
 786:	ac 01       	movw	r20, r24
 788:	4f 5f       	subi	r20, 0xFF	; 255
 78a:	5f 4f       	sbci	r21, 0xFF	; 255
 78c:	5d 8b       	std	Y+21, r21	; 0x15
 78e:	4c 8b       	std	Y+20, r20	; 0x14
 790:	fc 01       	movw	r30, r24
 792:	80 81       	ld	r24, Z
 794:	86 27       	eor	r24, r22
 796:	f9 01       	movw	r30, r18
 798:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	8f 5f       	subi	r24, 0xFF	; 255
 79e:	89 83       	std	Y+1, r24	; 0x01
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	80 31       	cpi	r24, 0x10	; 16
 7a4:	f0 f2       	brcs	.-68     	; 0x762 <aes_encrypt_128+0x28>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	8a 83       	std	Y+2, r24	; 0x02
 7aa:	50 c1       	rjmp	.+672    	; 0xa4c <__stack+0x14d>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7ac:	19 82       	std	Y+1, r1	; 0x01
 7ae:	1c c0       	rjmp	.+56     	; 0x7e8 <aes_encrypt_128+0xae>
            *(tmp+i) = SBOX[*(ciphertext+i)];
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	88 2f       	mov	r24, r24
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	9e 01       	movw	r18, r28
 7b8:	2c 5f       	subi	r18, 0xFC	; 252
 7ba:	3f 4f       	sbci	r19, 0xFF	; 255
 7bc:	82 0f       	add	r24, r18
 7be:	93 1f       	adc	r25, r19
 7c0:	29 81       	ldd	r18, Y+1	; 0x01
 7c2:	22 2f       	mov	r18, r18
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	48 8d       	ldd	r20, Y+24	; 0x18
 7c8:	59 8d       	ldd	r21, Y+25	; 0x19
 7ca:	24 0f       	add	r18, r20
 7cc:	35 1f       	adc	r19, r21
 7ce:	f9 01       	movw	r30, r18
 7d0:	20 81       	ld	r18, Z
 7d2:	22 2f       	mov	r18, r18
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	20 50       	subi	r18, 0x00	; 0
 7d8:	3e 4f       	sbci	r19, 0xFE	; 254
 7da:	f9 01       	movw	r30, r18
 7dc:	20 81       	ld	r18, Z
 7de:	fc 01       	movw	r30, r24
 7e0:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	8f 5f       	subi	r24, 0xFF	; 255
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	80 31       	cpi	r24, 0x10	; 16
 7ec:	08 f3       	brcs	.-62     	; 0x7b0 <aes_encrypt_128+0x76>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
 7ee:	ce 01       	movw	r24, r28
 7f0:	04 96       	adiw	r24, 0x04	; 4
 7f2:	0e 94 1a 03 	call	0x634	; 0x634 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 7f6:	19 82       	std	Y+1, r1	; 0x01
 7f8:	fe c0       	rjmp	.+508    	; 0x9f6 <__stack+0xf7>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	88 2f       	mov	r24, r24
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	9e 01       	movw	r18, r28
 802:	2c 5f       	subi	r18, 0xFC	; 252
 804:	3f 4f       	sbci	r19, 0xFF	; 255
 806:	82 0f       	add	r24, r18
 808:	93 1f       	adc	r25, r19
 80a:	fc 01       	movw	r30, r24
 80c:	40 81       	ld	r20, Z
 80e:	89 81       	ldd	r24, Y+1	; 0x01
 810:	88 2f       	mov	r24, r24
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	9e 01       	movw	r18, r28
 818:	2c 5f       	subi	r18, 0xFC	; 252
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	82 0f       	add	r24, r18
 81e:	93 1f       	adc	r25, r19
 820:	fc 01       	movw	r30, r24
 822:	80 81       	ld	r24, Z
 824:	48 27       	eor	r20, r24
 826:	89 81       	ldd	r24, Y+1	; 0x01
 828:	88 2f       	mov	r24, r24
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 96       	adiw	r24, 0x02	; 2
 82e:	9e 01       	movw	r18, r28
 830:	2c 5f       	subi	r18, 0xFC	; 252
 832:	3f 4f       	sbci	r19, 0xFF	; 255
 834:	82 0f       	add	r24, r18
 836:	93 1f       	adc	r25, r19
 838:	fc 01       	movw	r30, r24
 83a:	80 81       	ld	r24, Z
 83c:	48 27       	eor	r20, r24
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	88 2f       	mov	r24, r24
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	03 96       	adiw	r24, 0x03	; 3
 846:	9e 01       	movw	r18, r28
 848:	2c 5f       	subi	r18, 0xFC	; 252
 84a:	3f 4f       	sbci	r19, 0xFF	; 255
 84c:	82 0f       	add	r24, r18
 84e:	93 1f       	adc	r25, r19
 850:	fc 01       	movw	r30, r24
 852:	80 81       	ld	r24, Z
 854:	84 27       	eor	r24, r20
 856:	8b 83       	std	Y+3, r24	; 0x03
			
            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	88 2f       	mov	r24, r24
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	28 8d       	ldd	r18, Y+24	; 0x18
 860:	39 8d       	ldd	r19, Y+25	; 0x19
 862:	89 01       	movw	r16, r18
 864:	08 0f       	add	r16, r24
 866:	19 1f       	adc	r17, r25
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	88 2f       	mov	r24, r24
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	9e 01       	movw	r18, r28
 870:	2c 5f       	subi	r18, 0xFC	; 252
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	82 0f       	add	r24, r18
 876:	93 1f       	adc	r25, r19
 878:	fc 01       	movw	r30, r24
 87a:	40 81       	ld	r20, Z
 87c:	89 81       	ldd	r24, Y+1	; 0x01
 87e:	88 2f       	mov	r24, r24
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	9e 01       	movw	r18, r28
 886:	2c 5f       	subi	r18, 0xFC	; 252
 888:	3f 4f       	sbci	r19, 0xFF	; 255
 88a:	82 0f       	add	r24, r18
 88c:	93 1f       	adc	r25, r19
 88e:	fc 01       	movw	r30, r24
 890:	80 81       	ld	r24, Z
 892:	84 27       	eor	r24, r20
 894:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 898:	48 2f       	mov	r20, r24
 89a:	89 81       	ldd	r24, Y+1	; 0x01
 89c:	88 2f       	mov	r24, r24
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	9e 01       	movw	r18, r28
 8a2:	2c 5f       	subi	r18, 0xFC	; 252
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	82 0f       	add	r24, r18
 8a8:	93 1f       	adc	r25, r19
 8aa:	fc 01       	movw	r30, r24
 8ac:	80 81       	ld	r24, Z
 8ae:	94 2f       	mov	r25, r20
 8b0:	98 27       	eor	r25, r24
 8b2:	8b 81       	ldd	r24, Y+3	; 0x03
 8b4:	89 27       	eor	r24, r25
 8b6:	f8 01       	movw	r30, r16
 8b8:	80 83       	st	Z, r24
            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
 8ba:	89 81       	ldd	r24, Y+1	; 0x01
 8bc:	88 2f       	mov	r24, r24
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	28 8d       	ldd	r18, Y+24	; 0x18
 8c4:	39 8d       	ldd	r19, Y+25	; 0x19
 8c6:	89 01       	movw	r16, r18
 8c8:	08 0f       	add	r16, r24
 8ca:	19 1f       	adc	r17, r25
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	88 2f       	mov	r24, r24
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	9e 01       	movw	r18, r28
 8d6:	2c 5f       	subi	r18, 0xFC	; 252
 8d8:	3f 4f       	sbci	r19, 0xFF	; 255
 8da:	82 0f       	add	r24, r18
 8dc:	93 1f       	adc	r25, r19
 8de:	fc 01       	movw	r30, r24
 8e0:	40 81       	ld	r20, Z
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	88 2f       	mov	r24, r24
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 96       	adiw	r24, 0x02	; 2
 8ea:	9e 01       	movw	r18, r28
 8ec:	2c 5f       	subi	r18, 0xFC	; 252
 8ee:	3f 4f       	sbci	r19, 0xFF	; 255
 8f0:	82 0f       	add	r24, r18
 8f2:	93 1f       	adc	r25, r19
 8f4:	fc 01       	movw	r30, r24
 8f6:	80 81       	ld	r24, Z
 8f8:	84 27       	eor	r24, r20
 8fa:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 8fe:	48 2f       	mov	r20, r24
 900:	89 81       	ldd	r24, Y+1	; 0x01
 902:	88 2f       	mov	r24, r24
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	9e 01       	movw	r18, r28
 90a:	2c 5f       	subi	r18, 0xFC	; 252
 90c:	3f 4f       	sbci	r19, 0xFF	; 255
 90e:	82 0f       	add	r24, r18
 910:	93 1f       	adc	r25, r19
 912:	fc 01       	movw	r30, r24
 914:	80 81       	ld	r24, Z
 916:	94 2f       	mov	r25, r20
 918:	98 27       	eor	r25, r24
 91a:	8b 81       	ldd	r24, Y+3	; 0x03
 91c:	89 27       	eor	r24, r25
 91e:	f8 01       	movw	r30, r16
 920:	80 83       	st	Z, r24
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	88 2f       	mov	r24, r24
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 96       	adiw	r24, 0x02	; 2
 92a:	28 8d       	ldd	r18, Y+24	; 0x18
 92c:	39 8d       	ldd	r19, Y+25	; 0x19
 92e:	89 01       	movw	r16, r18
 930:	08 0f       	add	r16, r24
 932:	19 1f       	adc	r17, r25
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	88 2f       	mov	r24, r24
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	02 96       	adiw	r24, 0x02	; 2
 93c:	9e 01       	movw	r18, r28
 93e:	2c 5f       	subi	r18, 0xFC	; 252
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	82 0f       	add	r24, r18
 944:	93 1f       	adc	r25, r19
 946:	fc 01       	movw	r30, r24
 948:	40 81       	ld	r20, Z
 94a:	89 81       	ldd	r24, Y+1	; 0x01
 94c:	88 2f       	mov	r24, r24
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	03 96       	adiw	r24, 0x03	; 3
 952:	9e 01       	movw	r18, r28
 954:	2c 5f       	subi	r18, 0xFC	; 252
 956:	3f 4f       	sbci	r19, 0xFF	; 255
 958:	82 0f       	add	r24, r18
 95a:	93 1f       	adc	r25, r19
 95c:	fc 01       	movw	r30, r24
 95e:	80 81       	ld	r24, Z
 960:	84 27       	eor	r24, r20
 962:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 966:	48 2f       	mov	r20, r24
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	88 2f       	mov	r24, r24
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	02 96       	adiw	r24, 0x02	; 2
 970:	9e 01       	movw	r18, r28
 972:	2c 5f       	subi	r18, 0xFC	; 252
 974:	3f 4f       	sbci	r19, 0xFF	; 255
 976:	82 0f       	add	r24, r18
 978:	93 1f       	adc	r25, r19
 97a:	fc 01       	movw	r30, r24
 97c:	80 81       	ld	r24, Z
 97e:	94 2f       	mov	r25, r20
 980:	98 27       	eor	r25, r24
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	89 27       	eor	r24, r25
 986:	f8 01       	movw	r30, r16
 988:	80 83       	st	Z, r24
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	88 2f       	mov	r24, r24
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	03 96       	adiw	r24, 0x03	; 3
 992:	28 8d       	ldd	r18, Y+24	; 0x18
 994:	39 8d       	ldd	r19, Y+25	; 0x19
 996:	89 01       	movw	r16, r18
 998:	08 0f       	add	r16, r24
 99a:	19 1f       	adc	r17, r25
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	88 2f       	mov	r24, r24
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	03 96       	adiw	r24, 0x03	; 3
 9a4:	9e 01       	movw	r18, r28
 9a6:	2c 5f       	subi	r18, 0xFC	; 252
 9a8:	3f 4f       	sbci	r19, 0xFF	; 255
 9aa:	82 0f       	add	r24, r18
 9ac:	93 1f       	adc	r25, r19
 9ae:	fc 01       	movw	r30, r24
 9b0:	40 81       	ld	r20, Z
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	88 2f       	mov	r24, r24
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	9e 01       	movw	r18, r28
 9ba:	2c 5f       	subi	r18, 0xFC	; 252
 9bc:	3f 4f       	sbci	r19, 0xFF	; 255
 9be:	82 0f       	add	r24, r18
 9c0:	93 1f       	adc	r25, r19
 9c2:	fc 01       	movw	r30, r24
 9c4:	80 81       	ld	r24, Z
 9c6:	84 27       	eor	r24, r20
 9c8:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 9cc:	48 2f       	mov	r20, r24
 9ce:	89 81       	ldd	r24, Y+1	; 0x01
 9d0:	88 2f       	mov	r24, r24
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	03 96       	adiw	r24, 0x03	; 3
 9d6:	9e 01       	movw	r18, r28
 9d8:	2c 5f       	subi	r18, 0xFC	; 252
 9da:	3f 4f       	sbci	r19, 0xFF	; 255
 9dc:	82 0f       	add	r24, r18
 9de:	93 1f       	adc	r25, r19
 9e0:	fc 01       	movw	r30, r24
 9e2:	80 81       	ld	r24, Z
 9e4:	94 2f       	mov	r25, r20
 9e6:	98 27       	eor	r25, r24
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ea:	89 27       	eor	r24, r25
 9ec:	f8 01       	movw	r30, r16
 9ee:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 9f0:	89 81       	ldd	r24, Y+1	; 0x01
 9f2:	8c 5f       	subi	r24, 0xFC	; 252
 9f4:	89 83       	std	Y+1, r24	; 0x01
 9f6:	89 81       	ldd	r24, Y+1	; 0x01
 9f8:	80 31       	cpi	r24, 0x10	; 16
 9fa:	08 f4       	brcc	.+2      	; 0x9fe <__stack+0xff>
 9fc:	fe ce       	rjmp	.-516    	; 0x7fa <aes_encrypt_128+0xc0>
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 9fe:	19 82       	std	Y+1, r1	; 0x01
 a00:	1f c0       	rjmp	.+62     	; 0xa40 <__stack+0x141>
            *(ciphertext+i) ^= *roundkeys++;
 a02:	8c 89       	ldd	r24, Y+20	; 0x14
 a04:	9d 89       	ldd	r25, Y+21	; 0x15
 a06:	9c 01       	movw	r18, r24
 a08:	2f 5f       	subi	r18, 0xFF	; 255
 a0a:	3f 4f       	sbci	r19, 0xFF	; 255
 a0c:	3d 8b       	std	Y+21, r19	; 0x15
 a0e:	2c 8b       	std	Y+20, r18	; 0x14
 a10:	fc 01       	movw	r30, r24
 a12:	60 81       	ld	r22, Z
 a14:	89 81       	ldd	r24, Y+1	; 0x01
 a16:	88 2f       	mov	r24, r24
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	28 8d       	ldd	r18, Y+24	; 0x18
 a1c:	39 8d       	ldd	r19, Y+25	; 0x19
 a1e:	82 0f       	add	r24, r18
 a20:	93 1f       	adc	r25, r19
 a22:	29 81       	ldd	r18, Y+1	; 0x01
 a24:	22 2f       	mov	r18, r18
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	48 8d       	ldd	r20, Y+24	; 0x18
 a2a:	59 8d       	ldd	r21, Y+25	; 0x19
 a2c:	24 0f       	add	r18, r20
 a2e:	35 1f       	adc	r19, r21
 a30:	f9 01       	movw	r30, r18
 a32:	20 81       	ld	r18, Z
 a34:	26 27       	eor	r18, r22
 a36:	fc 01       	movw	r30, r24
 a38:	20 83       	st	Z, r18
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	8f 5f       	subi	r24, 0xFF	; 255
 a3e:	89 83       	std	Y+1, r24	; 0x01
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	80 31       	cpi	r24, 0x10	; 16
 a44:	f0 f2       	brcs	.-68     	; 0xa02 <__stack+0x103>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
 a46:	8a 81       	ldd	r24, Y+2	; 0x02
 a48:	8f 5f       	subi	r24, 0xFF	; 255
 a4a:	8a 83       	std	Y+2, r24	; 0x02
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	8a 30       	cpi	r24, 0x0A	; 10
 a50:	08 f4       	brcc	.+2      	; 0xa54 <__stack+0x155>
 a52:	ac ce       	rjmp	.-680    	; 0x7ac <aes_encrypt_128+0x72>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 a54:	19 82       	std	Y+1, r1	; 0x01
 a56:	1b c0       	rjmp	.+54     	; 0xa8e <__stack+0x18f>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	88 2f       	mov	r24, r24
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	28 8d       	ldd	r18, Y+24	; 0x18
 a60:	39 8d       	ldd	r19, Y+25	; 0x19
 a62:	82 0f       	add	r24, r18
 a64:	93 1f       	adc	r25, r19
 a66:	29 81       	ldd	r18, Y+1	; 0x01
 a68:	22 2f       	mov	r18, r18
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	48 8d       	ldd	r20, Y+24	; 0x18
 a6e:	59 8d       	ldd	r21, Y+25	; 0x19
 a70:	24 0f       	add	r18, r20
 a72:	35 1f       	adc	r19, r21
 a74:	f9 01       	movw	r30, r18
 a76:	20 81       	ld	r18, Z
 a78:	22 2f       	mov	r18, r18
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	20 50       	subi	r18, 0x00	; 0
 a7e:	3e 4f       	sbci	r19, 0xFE	; 254
 a80:	f9 01       	movw	r30, r18
 a82:	20 81       	ld	r18, Z
 a84:	fc 01       	movw	r30, r24
 a86:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 a88:	89 81       	ldd	r24, Y+1	; 0x01
 a8a:	8f 5f       	subi	r24, 0xFF	; 255
 a8c:	89 83       	std	Y+1, r24	; 0x01
 a8e:	89 81       	ldd	r24, Y+1	; 0x01
 a90:	80 31       	cpi	r24, 0x10	; 16
 a92:	10 f3       	brcs	.-60     	; 0xa58 <__stack+0x159>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
 a94:	88 8d       	ldd	r24, Y+24	; 0x18
 a96:	99 8d       	ldd	r25, Y+25	; 0x19
 a98:	0e 94 1a 03 	call	0x634	; 0x634 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 a9c:	19 82       	std	Y+1, r1	; 0x01
 a9e:	1f c0       	rjmp	.+62     	; 0xade <__stack+0x1df>
        *(ciphertext+i) ^= *roundkeys++;
 aa0:	8c 89       	ldd	r24, Y+20	; 0x14
 aa2:	9d 89       	ldd	r25, Y+21	; 0x15
 aa4:	9c 01       	movw	r18, r24
 aa6:	2f 5f       	subi	r18, 0xFF	; 255
 aa8:	3f 4f       	sbci	r19, 0xFF	; 255
 aaa:	3d 8b       	std	Y+21, r19	; 0x15
 aac:	2c 8b       	std	Y+20, r18	; 0x14
 aae:	fc 01       	movw	r30, r24
 ab0:	60 81       	ld	r22, Z
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	88 2f       	mov	r24, r24
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	28 8d       	ldd	r18, Y+24	; 0x18
 aba:	39 8d       	ldd	r19, Y+25	; 0x19
 abc:	82 0f       	add	r24, r18
 abe:	93 1f       	adc	r25, r19
 ac0:	29 81       	ldd	r18, Y+1	; 0x01
 ac2:	22 2f       	mov	r18, r18
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	48 8d       	ldd	r20, Y+24	; 0x18
 ac8:	59 8d       	ldd	r21, Y+25	; 0x19
 aca:	24 0f       	add	r18, r20
 acc:	35 1f       	adc	r19, r21
 ace:	f9 01       	movw	r30, r18
 ad0:	20 81       	ld	r18, Z
 ad2:	26 27       	eor	r18, r22
 ad4:	fc 01       	movw	r30, r24
 ad6:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 ad8:	89 81       	ldd	r24, Y+1	; 0x01
 ada:	8f 5f       	subi	r24, 0xFF	; 255
 adc:	89 83       	std	Y+1, r24	; 0x01
 ade:	89 81       	ldd	r24, Y+1	; 0x01
 ae0:	80 31       	cpi	r24, 0x10	; 16
 ae2:	f0 f2       	brcs	.-68     	; 0xaa0 <__stack+0x1a1>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
 ae4:	00 00       	nop
 ae6:	69 96       	adiw	r28, 0x19	; 25
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	df 91       	pop	r29
 af4:	cf 91       	pop	r28
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	08 95       	ret

00000afc <aes_key_schedule_128>:
#include "Common.h"
/*
 * round constants
 */
uint8_t RC[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
void aes_key_schedule_128( uint8_t *key, uint8_t *roundkeys) {
 afc:	cf 93       	push	r28
 afe:	df 93       	push	r29
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
 b04:	2e 97       	sbiw	r28, 0x0e	; 14
 b06:	0f b6       	in	r0, 0x3f	; 63
 b08:	f8 94       	cli
 b0a:	de bf       	out	0x3e, r29	; 62
 b0c:	0f be       	out	0x3f, r0	; 63
 b0e:	cd bf       	out	0x3d, r28	; 61
 b10:	9c 87       	std	Y+12, r25	; 0x0c
 b12:	8b 87       	std	Y+11, r24	; 0x0b
 b14:	7e 87       	std	Y+14, r23	; 0x0e
 b16:	6d 87       	std	Y+13, r22	; 0x0d

    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i,j=0;
 b18:	1e 82       	std	Y+6, r1	; 0x06

    for (i = 0; i < 16; ++i) {
 b1a:	1d 82       	std	Y+5, r1	; 0x05
 b1c:	15 c0       	rjmp	.+42     	; 0xb48 <aes_key_schedule_128+0x4c>
        *roundkeys++ = *key++;
 b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
 b20:	9e 85       	ldd	r25, Y+14	; 0x0e
 b22:	9c 01       	movw	r18, r24
 b24:	2f 5f       	subi	r18, 0xFF	; 255
 b26:	3f 4f       	sbci	r19, 0xFF	; 255
 b28:	3e 87       	std	Y+14, r19	; 0x0e
 b2a:	2d 87       	std	Y+13, r18	; 0x0d
 b2c:	2b 85       	ldd	r18, Y+11	; 0x0b
 b2e:	3c 85       	ldd	r19, Y+12	; 0x0c
 b30:	a9 01       	movw	r20, r18
 b32:	4f 5f       	subi	r20, 0xFF	; 255
 b34:	5f 4f       	sbci	r21, 0xFF	; 255
 b36:	5c 87       	std	Y+12, r21	; 0x0c
 b38:	4b 87       	std	Y+11, r20	; 0x0b
 b3a:	f9 01       	movw	r30, r18
 b3c:	20 81       	ld	r18, Z
 b3e:	fc 01       	movw	r30, r24
 b40:	20 83       	st	Z, r18
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i,j=0;

    for (i = 0; i < 16; ++i) {
 b42:	8d 81       	ldd	r24, Y+5	; 0x05
 b44:	8f 5f       	subi	r24, 0xFF	; 255
 b46:	8d 83       	std	Y+5, r24	; 0x05
 b48:	8d 81       	ldd	r24, Y+5	; 0x05
 b4a:	80 31       	cpi	r24, 0x10	; 16
 b4c:	40 f3       	brcs	.-48     	; 0xb1e <aes_key_schedule_128+0x22>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
 b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
 b50:	9e 85       	ldd	r25, Y+14	; 0x0e
 b52:	04 97       	sbiw	r24, 0x04	; 4
 b54:	9a 83       	std	Y+2, r25	; 0x02
 b56:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < AES_ROUNDS; ++i) {
 b58:	1d 82       	std	Y+5, r1	; 0x05
 b5a:	9a c0       	rjmp	.+308    	; 0xc90 <aes_key_schedule_128+0x194>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
 b5e:	9a 81       	ldd	r25, Y+2	; 0x02
 b60:	9c 01       	movw	r18, r24
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	3f 4f       	sbci	r19, 0xFF	; 255
 b66:	3a 83       	std	Y+2, r19	; 0x02
 b68:	29 83       	std	Y+1, r18	; 0x01
 b6a:	fc 01       	movw	r30, r24
 b6c:	80 81       	ld	r24, Z
 b6e:	88 2f       	mov	r24, r24
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	80 50       	subi	r24, 0x00	; 0
 b74:	9e 4f       	sbci	r25, 0xFE	; 254
 b76:	fc 01       	movw	r30, r24
 b78:	80 81       	ld	r24, Z
 b7a:	8a 87       	std	Y+10, r24	; 0x0a
        temp[0] = SBOX[*last4bytes++];
 b7c:	89 81       	ldd	r24, Y+1	; 0x01
 b7e:	9a 81       	ldd	r25, Y+2	; 0x02
 b80:	9c 01       	movw	r18, r24
 b82:	2f 5f       	subi	r18, 0xFF	; 255
 b84:	3f 4f       	sbci	r19, 0xFF	; 255
 b86:	3a 83       	std	Y+2, r19	; 0x02
 b88:	29 83       	std	Y+1, r18	; 0x01
 b8a:	fc 01       	movw	r30, r24
 b8c:	80 81       	ld	r24, Z
 b8e:	88 2f       	mov	r24, r24
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	80 50       	subi	r24, 0x00	; 0
 b94:	9e 4f       	sbci	r25, 0xFE	; 254
 b96:	fc 01       	movw	r30, r24
 b98:	80 81       	ld	r24, Z
 b9a:	8f 83       	std	Y+7, r24	; 0x07
        temp[1] = SBOX[*last4bytes++];
 b9c:	89 81       	ldd	r24, Y+1	; 0x01
 b9e:	9a 81       	ldd	r25, Y+2	; 0x02
 ba0:	9c 01       	movw	r18, r24
 ba2:	2f 5f       	subi	r18, 0xFF	; 255
 ba4:	3f 4f       	sbci	r19, 0xFF	; 255
 ba6:	3a 83       	std	Y+2, r19	; 0x02
 ba8:	29 83       	std	Y+1, r18	; 0x01
 baa:	fc 01       	movw	r30, r24
 bac:	80 81       	ld	r24, Z
 bae:	88 2f       	mov	r24, r24
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	80 50       	subi	r24, 0x00	; 0
 bb4:	9e 4f       	sbci	r25, 0xFE	; 254
 bb6:	fc 01       	movw	r30, r24
 bb8:	80 81       	ld	r24, Z
 bba:	88 87       	std	Y+8, r24	; 0x08
        temp[2] = SBOX[*last4bytes++];
 bbc:	89 81       	ldd	r24, Y+1	; 0x01
 bbe:	9a 81       	ldd	r25, Y+2	; 0x02
 bc0:	9c 01       	movw	r18, r24
 bc2:	2f 5f       	subi	r18, 0xFF	; 255
 bc4:	3f 4f       	sbci	r19, 0xFF	; 255
 bc6:	3a 83       	std	Y+2, r19	; 0x02
 bc8:	29 83       	std	Y+1, r18	; 0x01
 bca:	fc 01       	movw	r30, r24
 bcc:	80 81       	ld	r24, Z
 bce:	88 2f       	mov	r24, r24
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	80 50       	subi	r24, 0x00	; 0
 bd4:	9e 4f       	sbci	r25, 0xFE	; 254
 bd6:	fc 01       	movw	r30, r24
 bd8:	80 81       	ld	r24, Z
 bda:	89 87       	std	Y+9, r24	; 0x09
        temp[0] ^= RC[i];
 bdc:	2f 81       	ldd	r18, Y+7	; 0x07
 bde:	8d 81       	ldd	r24, Y+5	; 0x05
 be0:	88 2f       	mov	r24, r24
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	80 50       	subi	r24, 0x00	; 0
 be6:	9d 4f       	sbci	r25, 0xFD	; 253
 be8:	fc 01       	movw	r30, r24
 bea:	80 81       	ld	r24, Z
 bec:	82 27       	eor	r24, r18
 bee:	8f 83       	std	Y+7, r24	; 0x07
        lastround = roundkeys-16;
 bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
 bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
 bf4:	40 97       	sbiw	r24, 0x10	; 16
 bf6:	9c 83       	std	Y+4, r25	; 0x04
 bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(j<4)
 bfa:	20 c0       	rjmp	.+64     	; 0xc3c <aes_key_schedule_128+0x140>
		{*roundkeys++ = temp[j] ^ *lastround++;
 bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
 bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
 c00:	9c 01       	movw	r18, r24
 c02:	2f 5f       	subi	r18, 0xFF	; 255
 c04:	3f 4f       	sbci	r19, 0xFF	; 255
 c06:	3e 87       	std	Y+14, r19	; 0x0e
 c08:	2d 87       	std	Y+13, r18	; 0x0d
 c0a:	2e 81       	ldd	r18, Y+6	; 0x06
 c0c:	22 2f       	mov	r18, r18
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	ae 01       	movw	r20, r28
 c12:	49 5f       	subi	r20, 0xF9	; 249
 c14:	5f 4f       	sbci	r21, 0xFF	; 255
 c16:	24 0f       	add	r18, r20
 c18:	35 1f       	adc	r19, r21
 c1a:	f9 01       	movw	r30, r18
 c1c:	60 81       	ld	r22, Z
 c1e:	2b 81       	ldd	r18, Y+3	; 0x03
 c20:	3c 81       	ldd	r19, Y+4	; 0x04
 c22:	a9 01       	movw	r20, r18
 c24:	4f 5f       	subi	r20, 0xFF	; 255
 c26:	5f 4f       	sbci	r21, 0xFF	; 255
 c28:	5c 83       	std	Y+4, r21	; 0x04
 c2a:	4b 83       	std	Y+3, r20	; 0x03
 c2c:	f9 01       	movw	r30, r18
 c2e:	20 81       	ld	r18, Z
 c30:	26 27       	eor	r18, r22
 c32:	fc 01       	movw	r30, r24
 c34:	20 83       	st	Z, r18
			j++;
 c36:	8e 81       	ldd	r24, Y+6	; 0x06
 c38:	8f 5f       	subi	r24, 0xFF	; 255
 c3a:	8e 83       	std	Y+6, r24	; 0x06
        temp[0] = SBOX[*last4bytes++];
        temp[1] = SBOX[*last4bytes++];
        temp[2] = SBOX[*last4bytes++];
        temp[0] ^= RC[i];
        lastround = roundkeys-16;
		while(j<4)
 c3c:	8e 81       	ldd	r24, Y+6	; 0x06
 c3e:	84 30       	cpi	r24, 0x04	; 4
 c40:	e8 f2       	brcs	.-70     	; 0xbfc <aes_key_schedule_128+0x100>
		{*roundkeys++ = temp[j] ^ *lastround++;
			j++;
		}
		j=0;
 c42:	1e 82       	std	Y+6, r1	; 0x06
      while(j<12)
 c44:	1f c0       	rjmp	.+62     	; 0xc84 <aes_key_schedule_128+0x188>
	  {
		  *roundkeys++ = *last4bytes++ ^ *lastround++;
 c46:	8d 85       	ldd	r24, Y+13	; 0x0d
 c48:	9e 85       	ldd	r25, Y+14	; 0x0e
 c4a:	9c 01       	movw	r18, r24
 c4c:	2f 5f       	subi	r18, 0xFF	; 255
 c4e:	3f 4f       	sbci	r19, 0xFF	; 255
 c50:	3e 87       	std	Y+14, r19	; 0x0e
 c52:	2d 87       	std	Y+13, r18	; 0x0d
 c54:	29 81       	ldd	r18, Y+1	; 0x01
 c56:	3a 81       	ldd	r19, Y+2	; 0x02
 c58:	a9 01       	movw	r20, r18
 c5a:	4f 5f       	subi	r20, 0xFF	; 255
 c5c:	5f 4f       	sbci	r21, 0xFF	; 255
 c5e:	5a 83       	std	Y+2, r21	; 0x02
 c60:	49 83       	std	Y+1, r20	; 0x01
 c62:	f9 01       	movw	r30, r18
 c64:	60 81       	ld	r22, Z
 c66:	2b 81       	ldd	r18, Y+3	; 0x03
 c68:	3c 81       	ldd	r19, Y+4	; 0x04
 c6a:	a9 01       	movw	r20, r18
 c6c:	4f 5f       	subi	r20, 0xFF	; 255
 c6e:	5f 4f       	sbci	r21, 0xFF	; 255
 c70:	5c 83       	std	Y+4, r21	; 0x04
 c72:	4b 83       	std	Y+3, r20	; 0x03
 c74:	f9 01       	movw	r30, r18
 c76:	20 81       	ld	r18, Z
 c78:	26 27       	eor	r18, r22
 c7a:	fc 01       	movw	r30, r24
 c7c:	20 83       	st	Z, r18
		  j++;
 c7e:	8e 81       	ldd	r24, Y+6	; 0x06
 c80:	8f 5f       	subi	r24, 0xFF	; 255
 c82:	8e 83       	std	Y+6, r24	; 0x06
		while(j<4)
		{*roundkeys++ = temp[j] ^ *lastround++;
			j++;
		}
		j=0;
      while(j<12)
 c84:	8e 81       	ldd	r24, Y+6	; 0x06
 c86:	8c 30       	cpi	r24, 0x0C	; 12
 c88:	f0 f2       	brcs	.-68     	; 0xc46 <aes_key_schedule_128+0x14a>
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
 c8a:	8d 81       	ldd	r24, Y+5	; 0x05
 c8c:	8f 5f       	subi	r24, 0xFF	; 255
 c8e:	8d 83       	std	Y+5, r24	; 0x05
 c90:	8d 81       	ldd	r24, Y+5	; 0x05
 c92:	8a 30       	cpi	r24, 0x0A	; 10
 c94:	08 f4       	brcc	.+2      	; 0xc98 <aes_key_schedule_128+0x19c>
 c96:	62 cf       	rjmp	.-316    	; 0xb5c <aes_key_schedule_128+0x60>
		  *roundkeys++ = *last4bytes++ ^ *lastround++;
		  j++;
	  }      

    }
}
 c98:	00 00       	nop
 c9a:	2e 96       	adiw	r28, 0x0e	; 14
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	de bf       	out	0x3e, r29	; 62
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	08 95       	ret

00000cac <main>:
//#include <avr/io.h>

#include "Common.h"


int main(int argc, char *argv[]) {
 cac:	cf 93       	push	r28
 cae:	df 93       	push	r29
 cb0:	cd b7       	in	r28, 0x3d	; 61
 cb2:	de b7       	in	r29, 0x3e	; 62
 cb4:	c4 5f       	subi	r28, 0xF4	; 244
 cb6:	d1 09       	sbc	r29, r1
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	f8 94       	cli
 cbc:	de bf       	out	0x3e, r29	; 62
 cbe:	0f be       	out	0x3f, r0	; 63
 cc0:	cd bf       	out	0x3d, r28	; 61
 cc2:	9e 01       	movw	r18, r28
 cc4:	2f 50       	subi	r18, 0x0F	; 15
 cc6:	3f 4f       	sbci	r19, 0xFF	; 255
 cc8:	f9 01       	movw	r30, r18
 cca:	91 83       	std	Z+1, r25	; 0x01
 ccc:	80 83       	st	Z, r24
 cce:	ce 01       	movw	r24, r28
 cd0:	8d 50       	subi	r24, 0x0D	; 13
 cd2:	9f 4f       	sbci	r25, 0xFF	; 255
 cd4:	fc 01       	movw	r30, r24
 cd6:	71 83       	std	Z+1, r23	; 0x01
 cd8:	60 83       	st	Z, r22

	uint8_t i;

	/* 128 bit key */
	uint8_t key[] = {
 cda:	20 e1       	ldi	r18, 0x10	; 16
 cdc:	e8 e0       	ldi	r30, 0x08	; 8
 cde:	f3 e0       	ldi	r31, 0x03	; 3
 ce0:	ce 01       	movw	r24, r28
 ce2:	01 96       	adiw	r24, 0x01	; 1
 ce4:	dc 01       	movw	r26, r24
 ce6:	01 90       	ld	r0, Z+
 ce8:	0d 92       	st	X+, r0
 cea:	2a 95       	dec	r18
 cec:	e1 f7       	brne	.-8      	; 0xce6 <main+0x3a>
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 

	};

	uint8_t plaintext[] = {
 cee:	80 e1       	ldi	r24, 0x10	; 16
 cf0:	e8 e1       	ldi	r30, 0x18	; 24
 cf2:	f3 e0       	ldi	r31, 0x03	; 3
 cf4:	de 01       	movw	r26, r28
 cf6:	51 96       	adiw	r26, 0x11	; 17
 cf8:	01 90       	ld	r0, Z+
 cfa:	0d 92       	st	X+, r0
 cfc:	8a 95       	dec	r24
 cfe:	e1 f7       	brne	.-8      	; 0xcf8 <main+0x4c>
	uint8_t ciphertext[AES_BLOCK_SIZE];
	uint8_t const_cipher[AES_BLOCK_SIZE] ;
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];
	// key schedule
	aes_key_schedule_128(key, roundkeys);
 d00:	ce 01       	movw	r24, r28
 d02:	8f 5b       	subi	r24, 0xBF	; 191
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	bc 01       	movw	r22, r24
 d08:	ce 01       	movw	r24, r28
 d0a:	01 96       	adiw	r24, 0x01	; 1
 d0c:	0e 94 7e 05 	call	0xafc	; 0xafc <aes_key_schedule_128>
	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
 d10:	ae 01       	movw	r20, r28
 d12:	4f 5d       	subi	r20, 0xDF	; 223
 d14:	5f 4f       	sbci	r21, 0xFF	; 255
 d16:	9e 01       	movw	r18, r28
 d18:	2f 5e       	subi	r18, 0xEF	; 239
 d1a:	3f 4f       	sbci	r19, 0xFF	; 255
 d1c:	ce 01       	movw	r24, r28
 d1e:	8f 5b       	subi	r24, 0xBF	; 191
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	b9 01       	movw	r22, r18
 d24:	0e 94 9d 03 	call	0x73a	; 0x73a <aes_encrypt_128>

	// decryption
	aes_decrypt_128(roundkeys, ciphertext,ciphertext);
 d28:	ae 01       	movw	r20, r28
 d2a:	4f 5d       	subi	r20, 0xDF	; 223
 d2c:	5f 4f       	sbci	r21, 0xFF	; 255
 d2e:	9e 01       	movw	r18, r28
 d30:	2f 5d       	subi	r18, 0xDF	; 223
 d32:	3f 4f       	sbci	r19, 0xFF	; 255
 d34:	ce 01       	movw	r24, r28
 d36:	8f 5b       	subi	r24, 0xBF	; 191
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	b9 01       	movw	r22, r18
 d3c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <aes_decrypt_128>

	return 0;
 d40:	80 e0       	ldi	r24, 0x00	; 0
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	cc 50       	subi	r28, 0x0C	; 12
 d46:	df 4f       	sbci	r29, 0xFF	; 255
 d48:	0f b6       	in	r0, 0x3f	; 63
 d4a:	f8 94       	cli
 d4c:	de bf       	out	0x3e, r29	; 62
 d4e:	0f be       	out	0x3f, r0	; 63
 d50:	cd bf       	out	0x3d, r28	; 61
 d52:	df 91       	pop	r29
 d54:	cf 91       	pop	r28
 d56:	08 95       	ret

00000d58 <_exit>:
 d58:	f8 94       	cli

00000d5a <__stop_program>:
 d5a:	ff cf       	rjmp	.-2      	; 0xd5a <__stop_program>

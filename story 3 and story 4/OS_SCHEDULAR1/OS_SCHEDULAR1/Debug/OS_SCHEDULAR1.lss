
OS_SCHEDULAR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c22  00000cb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800062  00800062  00000cb8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b82  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008aa  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000835  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d3  00000000  00000000  000032c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000389a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 
#include "scheduleer.h " 
#include "tasks.h "

int main(void)
{	DIO_SetPinDirection(10,INPUT);
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_SetPinDirection>
	DIO_SetPinDirection(12,OUTPUT);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_SetPinDirection>
	DIO_SetPinDirection(13,OUTPUT);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_SetPinDirection>
	DIO_SetPinDirection(14,OUTPUT);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	8e e0       	ldi	r24, 0x0E	; 14
  b8:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_SetPinDirection>
	DIO_SetPinDirection(15,OUTPUT);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_SetPinDirection>
	use :
	scheduler_Add_Task if required to add task only
	add_func  if required to add task and the  period 
	*/
	
Scheduler_init_start ();
  c4:	0e 94 0e 03 	call	0x61c	; 0x61c <Scheduler_init_start>
	 cheeck=add_func(LED_ONE,1000,2);
  c8:	42 e0       	ldi	r20, 0x02	; 2
  ca:	68 ee       	ldi	r22, 0xE8	; 232
  cc:	73 e0       	ldi	r23, 0x03	; 3
  ce:	8b e3       	ldi	r24, 0x3B	; 59
  d0:	95 e0       	ldi	r25, 0x05	; 5
  d2:	0e 94 28 03 	call	0x650	; 0x650 <add_func>
  d6:	89 83       	std	Y+1, r24	; 0x01
 	 cheeck=add_func(LED_TWO,1400,3);
  d8:	43 e0       	ldi	r20, 0x03	; 3
  da:	68 e7       	ldi	r22, 0x78	; 120
  dc:	75 e0       	ldi	r23, 0x05	; 5
  de:	8f e4       	ldi	r24, 0x4F	; 79
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	0e 94 28 03 	call	0x650	; 0x650 <add_func>
  e6:	89 83       	std	Y+1, r24	; 0x01
	 cheeck=add_func(LED_THREE,1900,1);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	6c e6       	ldi	r22, 0x6C	; 108
  ec:	77 e0       	ldi	r23, 0x07	; 7
  ee:	83 e6       	ldi	r24, 0x63	; 99
  f0:	95 e0       	ldi	r25, 0x05	; 5
  f2:	0e 94 28 03 	call	0x650	; 0x650 <add_func>
  f6:	89 83       	std	Y+1, r24	; 0x01
	 cheeck=add_func(BUTTON_CHECK,1,4);
  f8:	44 e0       	ldi	r20, 0x04	; 4
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	87 e7       	ldi	r24, 0x77	; 119
 100:	95 e0       	ldi	r25, 0x05	; 5
 102:	0e 94 28 03 	call	0x650	; 0x650 <add_func>
 106:	89 83       	std	Y+1, r24	; 0x01
	if(cheeck==0){
	/* maximum number of  elements in the array */		
	}
schedulerStart ();
 108:	0e 94 1a 03 	call	0x634	; 0x634 <schedulerStart>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
}
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <DIO_WritePin>:
 * Created: 2/13/2019 3:03:00 PM
 *  Author: AVE-LAP-063
 */ 
#include "Dio.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	00 d0       	rcall	.+0      	; 0x11e <DIO_WritePin+0x6>
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	6a 83       	std	Y+2, r22	; 0x02
	
	if (PinNum>=EIGHT&&PinNum<16){
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	b0 f1       	brcs	.+108    	; 0x198 <DIO_WritePin+0x80>
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	98 f5       	brcc	.+102    	; 0x198 <DIO_WritePin+0x80>
		
		if (PinValue){
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	88 23       	and	r24, r24
 136:	c1 f0       	breq	.+48     	; 0x168 <DIO_WritePin+0x50>
			Set_Bit(PORTB,(PinNum-EIGHT));
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	28 e3       	ldi	r18, 0x38	; 56
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	62 2f       	mov	r22, r18
 146:	29 81       	ldd	r18, Y+1	; 0x01
 148:	22 2f       	mov	r18, r18
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	a9 01       	movw	r20, r18
 14e:	48 50       	subi	r20, 0x08	; 8
 150:	51 09       	sbc	r21, r1
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_WritePin+0x44>
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	4a 95       	dec	r20
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_WritePin+0x40>
 160:	26 2b       	or	r18, r22
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	18 c0       	rjmp	.+48     	; 0x198 <DIO_WritePin+0x80>
			
		}
		else {
			
			Clear_Bit(PORTB,(PinNum-EIGHT));
 168:	88 e3       	ldi	r24, 0x38	; 56
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	28 e3       	ldi	r18, 0x38	; 56
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	62 2f       	mov	r22, r18
 176:	29 81       	ldd	r18, Y+1	; 0x01
 178:	22 2f       	mov	r18, r18
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	a9 01       	movw	r20, r18
 17e:	48 50       	subi	r20, 0x08	; 8
 180:	51 09       	sbc	r21, r1
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_WritePin+0x74>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	4a 95       	dec	r20
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_WritePin+0x70>
 190:	20 95       	com	r18
 192:	26 23       	and	r18, r22
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
		}
	}
	if (PinNum>=ZERO&&PinNum<NINE){
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	89 30       	cpi	r24, 0x09	; 9
 19c:	68 f5       	brcc	.+90     	; 0x1f8 <DIO_WritePin+0xe0>
		
		if (PinValue){
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	88 23       	and	r24, r24
 1a2:	a9 f0       	breq	.+42     	; 0x1ce <DIO_WritePin+0xb6>
			Set_Bit(PORTA,PinNum);
 1a4:	8b e3       	ldi	r24, 0x3B	; 59
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	2b e3       	ldi	r18, 0x3B	; 59
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	62 2f       	mov	r22, r18
 1b2:	29 81       	ldd	r18, Y+1	; 0x01
 1b4:	42 2f       	mov	r20, r18
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WritePin+0xaa>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WritePin+0xa6>
 1c6:	26 2b       	or	r18, r22
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	15 c0       	rjmp	.+42     	; 0x1f8 <DIO_WritePin+0xe0>
			
		}
		else {
			
			Clear_Bit(PORTA,PinNum);
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	2b e3       	ldi	r18, 0x3B	; 59
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	62 2f       	mov	r22, r18
 1dc:	29 81       	ldd	r18, Y+1	; 0x01
 1de:	42 2f       	mov	r20, r18
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_WritePin+0xd4>
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	4a 95       	dec	r20
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_WritePin+0xd0>
 1f0:	20 95       	com	r18
 1f2:	26 23       	and	r18, r22
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
		}
	}
	 
	 if (PinNum>=16&&PinNum<24){
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	80 31       	cpi	r24, 0x10	; 16
 1fc:	b0 f1       	brcs	.+108    	; 0x26a <DIO_WritePin+0x152>
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 31       	cpi	r24, 0x18	; 24
 202:	98 f5       	brcc	.+102    	; 0x26a <DIO_WritePin+0x152>
		
		if (PinValue){
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	88 23       	and	r24, r24
 208:	c1 f0       	breq	.+48     	; 0x23a <DIO_WritePin+0x122>
			Set_Bit(PORTC,(PinNum-16));
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	25 e3       	ldi	r18, 0x35	; 53
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	f9 01       	movw	r30, r18
 214:	20 81       	ld	r18, Z
 216:	62 2f       	mov	r22, r18
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	22 2f       	mov	r18, r18
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	a9 01       	movw	r20, r18
 220:	40 51       	subi	r20, 0x10	; 16
 222:	51 09       	sbc	r21, r1
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_WritePin+0x116>
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	4a 95       	dec	r20
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_WritePin+0x112>
 232:	26 2b       	or	r18, r22
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
 238:	18 c0       	rjmp	.+48     	; 0x26a <DIO_WritePin+0x152>
			
		}
		else {
			
			Clear_Bit(PORTC,(PinNum-16));
 23a:	85 e3       	ldi	r24, 0x35	; 53
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	25 e3       	ldi	r18, 0x35	; 53
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	20 81       	ld	r18, Z
 246:	62 2f       	mov	r22, r18
 248:	29 81       	ldd	r18, Y+1	; 0x01
 24a:	22 2f       	mov	r18, r18
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	a9 01       	movw	r20, r18
 250:	40 51       	subi	r20, 0x10	; 16
 252:	51 09       	sbc	r21, r1
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_WritePin+0x146>
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	4a 95       	dec	r20
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_WritePin+0x142>
 262:	20 95       	com	r18
 264:	26 23       	and	r18, r22
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
			}
	}
		 if (PinNum>=24&&PinNum<32){
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	88 31       	cpi	r24, 0x18	; 24
 26e:	b0 f1       	brcs	.+108    	; 0x2dc <DIO_WritePin+0x1c4>
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	80 32       	cpi	r24, 0x20	; 32
 274:	98 f5       	brcc	.+102    	; 0x2dc <DIO_WritePin+0x1c4>
			
			if (PinValue==1){
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	c1 f4       	brne	.+48     	; 0x2ac <DIO_WritePin+0x194>
				Set_Bit(PORTD,(PinNum-24));
 27c:	82 e3       	ldi	r24, 0x32	; 50
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	22 e3       	ldi	r18, 0x32	; 50
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	62 2f       	mov	r22, r18
 28a:	29 81       	ldd	r18, Y+1	; 0x01
 28c:	22 2f       	mov	r18, r18
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	a9 01       	movw	r20, r18
 292:	48 51       	subi	r20, 0x18	; 24
 294:	51 09       	sbc	r21, r1
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_WritePin+0x188>
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	4a 95       	dec	r20
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_WritePin+0x184>
 2a4:	26 2b       	or	r18, r22
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
				
				Clear_Bit(PORTD,(PinNum-24));
				}	
			}
		
	}
 2aa:	18 c0       	rjmp	.+48     	; 0x2dc <DIO_WritePin+0x1c4>
				Set_Bit(PORTD,(PinNum-24));
				
				}
			else {
				
				Clear_Bit(PORTD,(PinNum-24));
 2ac:	82 e3       	ldi	r24, 0x32	; 50
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	22 e3       	ldi	r18, 0x32	; 50
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 81       	ld	r18, Z
 2b8:	62 2f       	mov	r22, r18
 2ba:	29 81       	ldd	r18, Y+1	; 0x01
 2bc:	22 2f       	mov	r18, r18
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	a9 01       	movw	r20, r18
 2c2:	48 51       	subi	r20, 0x18	; 24
 2c4:	51 09       	sbc	r21, r1
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_WritePin+0x1b8>
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	4a 95       	dec	r20
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_WritePin+0x1b4>
 2d4:	20 95       	com	r18
 2d6:	26 23       	and	r18, r22
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
				}	
			}
		
	}
 2dc:	00 00       	nop
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <DIO_ReadPin>:
	

 uint8 DIO_ReadPin(uint8 PinNum)
 
 {
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	1f 92       	push	r1
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	89 83       	std	Y+1, r24	; 0x01
	if (PinNum>=ZERO&&PinNum<EIGHT)
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	88 30       	cpi	r24, 0x08	; 8
 2f8:	d8 f4       	brcc	.+54     	; 0x330 <DIO_ReadPin+0x48>
	{
		return Get_Bit(PINA,PinNum);
 2fa:	89 e1       	ldi	r24, 0x19	; 25
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	80 81       	ld	r24, Z
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	48 2f       	mov	r20, r24
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_ReadPin+0x2e>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	4a 95       	dec	r20
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_ReadPin+0x2a>
 31a:	82 23       	and	r24, r18
 31c:	93 23       	and	r25, r19
 31e:	29 81       	ldd	r18, Y+1	; 0x01
 320:	22 2f       	mov	r18, r18
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_ReadPin+0x42>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	2a 95       	dec	r18
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_ReadPin+0x3e>
 32e:	72 c0       	rjmp	.+228    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		
	} 
	if (PinNum>=EIGHT&&PinNum<16)
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	18 f1       	brcs	.+70     	; 0x37c <DIO_ReadPin+0x94>
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	80 31       	cpi	r24, 0x10	; 16
 33a:	00 f5       	brcc	.+64     	; 0x37c <DIO_ReadPin+0x94>
	{
		return (Get_Bit(PINB,(PinNum-EIGHT)));
 33c:	86 e3       	ldi	r24, 0x36	; 54
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	80 81       	ld	r24, Z
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	88 2f       	mov	r24, r24
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	48 50       	subi	r20, 0x08	; 8
 352:	51 09       	sbc	r21, r1
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_ReadPin+0x76>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	4a 95       	dec	r20
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_ReadPin+0x72>
 362:	82 23       	and	r24, r18
 364:	93 23       	and	r25, r19
 366:	29 81       	ldd	r18, Y+1	; 0x01
 368:	22 2f       	mov	r18, r18
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	28 50       	subi	r18, 0x08	; 8
 36e:	31 09       	sbc	r19, r1
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_ReadPin+0x8e>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	2a 95       	dec	r18
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_ReadPin+0x8a>
 37a:	4c c0       	rjmp	.+152    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		
	} 
 
 
 
 if (PinNum>=16&&PinNum<24)
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	80 31       	cpi	r24, 0x10	; 16
 380:	18 f1       	brcs	.+70     	; 0x3c8 <DIO_ReadPin+0xe0>
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	88 31       	cpi	r24, 0x18	; 24
 386:	00 f5       	brcc	.+64     	; 0x3c8 <DIO_ReadPin+0xe0>
	{
		return Get_Bit(PINC,(PinNum-16));
 388:	83 e3       	ldi	r24, 0x33	; 51
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	fc 01       	movw	r30, r24
 38e:	80 81       	ld	r24, Z
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	88 2f       	mov	r24, r24
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	ac 01       	movw	r20, r24
 39c:	40 51       	subi	r20, 0x10	; 16
 39e:	51 09       	sbc	r21, r1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_ReadPin+0xc2>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	4a 95       	dec	r20
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_ReadPin+0xbe>
 3ae:	82 23       	and	r24, r18
 3b0:	93 23       	and	r25, r19
 3b2:	29 81       	ldd	r18, Y+1	; 0x01
 3b4:	22 2f       	mov	r18, r18
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	20 51       	subi	r18, 0x10	; 16
 3ba:	31 09       	sbc	r19, r1
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_ReadPin+0xda>
 3be:	95 95       	asr	r25
 3c0:	87 95       	ror	r24
 3c2:	2a 95       	dec	r18
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_ReadPin+0xd6>
 3c6:	26 c0       	rjmp	.+76     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		
	} 
	if (PinNum>=24&&PinNum<32)
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 31       	cpi	r24, 0x18	; 24
 3cc:	18 f1       	brcs	.+70     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	80 32       	cpi	r24, 0x20	; 32
 3d2:	00 f5       	brcc	.+64     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		return (Get_Bit(PIND,(PinNum-24)));
 3d4:	80 e3       	ldi	r24, 0x30	; 48
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fc 01       	movw	r30, r24
 3da:	80 81       	ld	r24, Z
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	ac 01       	movw	r20, r24
 3e8:	48 51       	subi	r20, 0x18	; 24
 3ea:	51 09       	sbc	r21, r1
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_ReadPin+0x10e>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	4a 95       	dec	r20
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_ReadPin+0x10a>
 3fa:	82 23       	and	r24, r18
 3fc:	93 23       	and	r25, r19
 3fe:	29 81       	ldd	r18, Y+1	; 0x01
 400:	22 2f       	mov	r18, r18
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	28 51       	subi	r18, 0x18	; 24
 406:	31 09       	sbc	r19, r1
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	2a 95       	dec	r18
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		
	} 

 }
 414:	0f 90       	pop	r0
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	00 d0       	rcall	.+0      	; 0x422 <DIO_SetPinDirection+0x6>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	89 83       	std	Y+1, r24	; 0x01
 428:	6a 83       	std	Y+2, r22	; 0x02
	
	if (PinNum>=EIGHT&&PinNum<16){
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	88 30       	cpi	r24, 0x08	; 8
 42e:	b0 f1       	brcs	.+108    	; 0x49c <DIO_SetPinDirection+0x80>
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	80 31       	cpi	r24, 0x10	; 16
 434:	98 f5       	brcc	.+102    	; 0x49c <DIO_SetPinDirection+0x80>
		
		if (PinDirection){
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	88 23       	and	r24, r24
 43a:	c1 f0       	breq	.+48     	; 0x46c <DIO_SetPinDirection+0x50>
			Set_Bit(DDRB,(PinNum-EIGHT));
 43c:	87 e3       	ldi	r24, 0x37	; 55
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	27 e3       	ldi	r18, 0x37	; 55
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	f9 01       	movw	r30, r18
 446:	20 81       	ld	r18, Z
 448:	62 2f       	mov	r22, r18
 44a:	29 81       	ldd	r18, Y+1	; 0x01
 44c:	22 2f       	mov	r18, r18
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	a9 01       	movw	r20, r18
 452:	48 50       	subi	r20, 0x08	; 8
 454:	51 09       	sbc	r21, r1
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_SetPinDirection+0x44>
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	4a 95       	dec	r20
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_SetPinDirection+0x40>
 464:	26 2b       	or	r18, r22
 466:	fc 01       	movw	r30, r24
 468:	20 83       	st	Z, r18
 46a:	18 c0       	rjmp	.+48     	; 0x49c <DIO_SetPinDirection+0x80>
			
		}
		else {
			
			Clear_Bit(DDRB,(PinNum-8));
 46c:	87 e3       	ldi	r24, 0x37	; 55
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	27 e3       	ldi	r18, 0x37	; 55
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	f9 01       	movw	r30, r18
 476:	20 81       	ld	r18, Z
 478:	62 2f       	mov	r22, r18
 47a:	29 81       	ldd	r18, Y+1	; 0x01
 47c:	22 2f       	mov	r18, r18
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	a9 01       	movw	r20, r18
 482:	48 50       	subi	r20, 0x08	; 8
 484:	51 09       	sbc	r21, r1
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_SetPinDirection+0x74>
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	4a 95       	dec	r20
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_SetPinDirection+0x70>
 494:	20 95       	com	r18
 496:	26 23       	and	r18, r22
 498:	fc 01       	movw	r30, r24
 49a:	20 83       	st	Z, r18
		}
	}
	if (PinNum>=0&&PinNum<9){
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	89 30       	cpi	r24, 0x09	; 9
 4a0:	68 f5       	brcc	.+90     	; 0x4fc <DIO_SetPinDirection+0xe0>
		
		if (PinDirection){
 4a2:	8a 81       	ldd	r24, Y+2	; 0x02
 4a4:	88 23       	and	r24, r24
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <DIO_SetPinDirection+0xb6>
			Set_Bit(DDRA,PinNum);
 4a8:	8a e3       	ldi	r24, 0x3A	; 58
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	2a e3       	ldi	r18, 0x3A	; 58
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	f9 01       	movw	r30, r18
 4b2:	20 81       	ld	r18, Z
 4b4:	62 2f       	mov	r22, r18
 4b6:	29 81       	ldd	r18, Y+1	; 0x01
 4b8:	42 2f       	mov	r20, r18
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_SetPinDirection+0xaa>
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	4a 95       	dec	r20
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_SetPinDirection+0xa6>
 4ca:	26 2b       	or	r18, r22
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
 4d0:	15 c0       	rjmp	.+42     	; 0x4fc <DIO_SetPinDirection+0xe0>
			
		}
		else {
			
			Clear_Bit(DDRA,PinNum);
 4d2:	8a e3       	ldi	r24, 0x3A	; 58
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	2a e3       	ldi	r18, 0x3A	; 58
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	20 81       	ld	r18, Z
 4de:	62 2f       	mov	r22, r18
 4e0:	29 81       	ldd	r18, Y+1	; 0x01
 4e2:	42 2f       	mov	r20, r18
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_SetPinDirection+0xd4>
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	4a 95       	dec	r20
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_SetPinDirection+0xd0>
 4f4:	20 95       	com	r18
 4f6:	26 23       	and	r18, r22
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
		}
	}
	
	if (PinNum>=16&&PinNum<24){
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	80 31       	cpi	r24, 0x10	; 16
 500:	b0 f1       	brcs	.+108    	; 0x56e <DIO_SetPinDirection+0x152>
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	88 31       	cpi	r24, 0x18	; 24
 506:	98 f5       	brcc	.+102    	; 0x56e <DIO_SetPinDirection+0x152>
		
		if (PinDirection){
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	88 23       	and	r24, r24
 50c:	c1 f0       	breq	.+48     	; 0x53e <DIO_SetPinDirection+0x122>
			Set_Bit(DDRC,(PinNum-16));
 50e:	84 e3       	ldi	r24, 0x34	; 52
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	24 e3       	ldi	r18, 0x34	; 52
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	f9 01       	movw	r30, r18
 518:	20 81       	ld	r18, Z
 51a:	62 2f       	mov	r22, r18
 51c:	29 81       	ldd	r18, Y+1	; 0x01
 51e:	22 2f       	mov	r18, r18
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	a9 01       	movw	r20, r18
 524:	40 51       	subi	r20, 0x10	; 16
 526:	51 09       	sbc	r21, r1
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_SetPinDirection+0x116>
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	4a 95       	dec	r20
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_SetPinDirection+0x112>
 536:	26 2b       	or	r18, r22
 538:	fc 01       	movw	r30, r24
 53a:	20 83       	st	Z, r18
 53c:	18 c0       	rjmp	.+48     	; 0x56e <DIO_SetPinDirection+0x152>
			
		}
		else {
			
			Clear_Bit(DDRC,(PinNum-16));
 53e:	84 e3       	ldi	r24, 0x34	; 52
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	24 e3       	ldi	r18, 0x34	; 52
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	f9 01       	movw	r30, r18
 548:	20 81       	ld	r18, Z
 54a:	62 2f       	mov	r22, r18
 54c:	29 81       	ldd	r18, Y+1	; 0x01
 54e:	22 2f       	mov	r18, r18
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	a9 01       	movw	r20, r18
 554:	40 51       	subi	r20, 0x10	; 16
 556:	51 09       	sbc	r21, r1
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_SetPinDirection+0x146>
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	4a 95       	dec	r20
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_SetPinDirection+0x142>
 566:	20 95       	com	r18
 568:	26 23       	and	r18, r22
 56a:	fc 01       	movw	r30, r24
 56c:	20 83       	st	Z, r18
		}
	}
	if (PinNum>=24&&PinNum<32){
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	88 31       	cpi	r24, 0x18	; 24
 572:	b0 f1       	brcs	.+108    	; 0x5e0 <DIO_SetPinDirection+0x1c4>
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	80 32       	cpi	r24, 0x20	; 32
 578:	98 f5       	brcc	.+102    	; 0x5e0 <DIO_SetPinDirection+0x1c4>
		
		if (PinDirection==1){
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	c1 f4       	brne	.+48     	; 0x5b0 <DIO_SetPinDirection+0x194>
			Set_Bit(DDRD,(PinNum-24));
 580:	81 e3       	ldi	r24, 0x31	; 49
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	21 e3       	ldi	r18, 0x31	; 49
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	f9 01       	movw	r30, r18
 58a:	20 81       	ld	r18, Z
 58c:	62 2f       	mov	r22, r18
 58e:	29 81       	ldd	r18, Y+1	; 0x01
 590:	22 2f       	mov	r18, r18
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	a9 01       	movw	r20, r18
 596:	48 51       	subi	r20, 0x18	; 24
 598:	51 09       	sbc	r21, r1
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_SetPinDirection+0x188>
 5a0:	22 0f       	add	r18, r18
 5a2:	33 1f       	adc	r19, r19
 5a4:	4a 95       	dec	r20
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_SetPinDirection+0x184>
 5a8:	26 2b       	or	r18, r22
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
		else {
			
			Clear_Bit(DDRD,(PinNum-24));
		}
	}
}
 5ae:	18 c0       	rjmp	.+48     	; 0x5e0 <DIO_SetPinDirection+0x1c4>
			Set_Bit(DDRD,(PinNum-24));
			
		}
		else {
			
			Clear_Bit(DDRD,(PinNum-24));
 5b0:	81 e3       	ldi	r24, 0x31	; 49
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	21 e3       	ldi	r18, 0x31	; 49
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	62 2f       	mov	r22, r18
 5be:	29 81       	ldd	r18, Y+1	; 0x01
 5c0:	22 2f       	mov	r18, r18
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	a9 01       	movw	r20, r18
 5c6:	48 51       	subi	r20, 0x18	; 24
 5c8:	51 09       	sbc	r21, r1
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_SetPinDirection+0x1b8>
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	4a 95       	dec	r20
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_SetPinDirection+0x1b4>
 5d8:	20 95       	com	r18
 5da:	26 23       	and	r18, r22
 5dc:	fc 01       	movw	r30, r24
 5de:	20 83       	st	Z, r18
		}
	}
}
 5e0:	00 00       	nop
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <flagtimer>:
	return ONE;	
	                 }
	else {	
		return ZERO;
	     }	
}
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 5fa:	00 00       	nop
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <TTC_SCHEDULAR>:
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 60e:	81 30       	cpi	r24, 0x01	; 1
 610:	e1 f7       	brne	.-8      	; 0x60a <TTC_SCHEDULAR+0x8>
 612:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 616:	0e 94 97 03 	call	0x72e	; 0x72e <Remaining>
 61a:	f7 cf       	rjmp	.-18     	; 0x60a <TTC_SCHEDULAR+0x8>

0000061c <Scheduler_init_start>:
********************************************************/



void Scheduler_init_start ()
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
	Set_CallBack(flagtimer); /*to set the callback function*/
 624:	86 ef       	ldi	r24, 0xF6	; 246
 626:	92 e0       	ldi	r25, 0x02	; 2
 628:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <Set_CallBack>
	
}
 62c:	00 00       	nop
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <schedulerStart>:
*Description: To initialize the timer setting and handle the tasks

********************************************************/

void schedulerStart ()
{
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
	 arrange_tasks(); /*this api is to arrange tasks according to priority order */
 63c:	0e 94 18 04 	call	0x830	; 0x830 <arrange_tasks>
	timer0_init(); /* To initialize the timer setting  */
 640:	0e 94 b9 05 	call	0xb72	; 0xb72 <timer0_init>
	TTC_SCHEDULAR (); /* to handle the tasks*/
 644:	0e 94 01 03 	call	0x602	; 0x602 <TTC_SCHEDULAR>
}
 648:	00 00       	nop
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <add_func>:
*Return:void
*Description: TO FILL THE ARRAY OF STRUCTURE WITH USER IT'S REQUIRED FROM THE USER TO DETERMINE  THE FUNCTION AND ITS PERIOD

********************************************************/
uint8 add_func(void (*ptrf)(void),uint16 PERIOD,uint8 prio)
{ 
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	00 d0       	rcall	.+0      	; 0x656 <add_func+0x6>
 656:	00 d0       	rcall	.+0      	; 0x658 <add_func+0x8>
 658:	1f 92       	push	r1
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	9a 83       	std	Y+2, r25	; 0x02
 660:	89 83       	std	Y+1, r24	; 0x01
 662:	7c 83       	std	Y+4, r23	; 0x04
 664:	6b 83       	std	Y+3, r22	; 0x03
 666:	4d 83       	std	Y+5, r20	; 0x05
	if (k<max_size)
 668:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 66c:	88 30       	cpi	r24, 0x08	; 8
 66e:	08 f0       	brcs	.+2      	; 0x672 <add_func+0x22>
 670:	55 c0       	rjmp	.+170    	; 0x71c <add_func+0xcc>
	{
  Schedular_Struct[k].Ptr2func=ptrf;
 672:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	c9 01       	movw	r24, r18
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	82 1b       	sub	r24, r18
 68a:	93 0b       	sbc	r25, r19
 68c:	8c 59       	subi	r24, 0x9C	; 156
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	29 81       	ldd	r18, Y+1	; 0x01
 692:	3a 81       	ldd	r19, Y+2	; 0x02
 694:	fc 01       	movw	r30, r24
 696:	31 83       	std	Z+1, r19	; 0x01
 698:	20 83       	st	Z, r18
  Schedular_Struct[k].Task_Periodicty=PERIOD;
 69a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 69e:	28 2f       	mov	r18, r24
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	c9 01       	movw	r24, r18
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	82 1b       	sub	r24, r18
 6b2:	93 0b       	sbc	r25, r19
 6b4:	8a 59       	subi	r24, 0x9A	; 154
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	2b 81       	ldd	r18, Y+3	; 0x03
 6ba:	3c 81       	ldd	r19, Y+4	; 0x04
 6bc:	fc 01       	movw	r30, r24
 6be:	31 83       	std	Z+1, r19	; 0x01
 6c0:	20 83       	st	Z, r18
   Schedular_Struct[k].priority=prio;
 6c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	c9 01       	movw	r24, r18
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	82 1b       	sub	r24, r18
 6da:	93 0b       	sbc	r25, r19
 6dc:	86 59       	subi	r24, 0x96	; 150
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	2d 81       	ldd	r18, Y+5	; 0x05
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 83       	st	Z, r18
  Schedular_Struct[k].Remaining_Ticks=PERIOD; /* initializing the remaining to the period*/
 6e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 6ea:	28 2f       	mov	r18, r24
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	c9 01       	movw	r24, r18
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	82 1b       	sub	r24, r18
 6fe:	93 0b       	sbc	r25, r19
 700:	88 59       	subi	r24, 0x98	; 152
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	2b 81       	ldd	r18, Y+3	; 0x03
 706:	3c 81       	ldd	r19, Y+4	; 0x04
 708:	fc 01       	movw	r30, r24
 70a:	31 83       	std	Z+1, r19	; 0x01
 70c:	20 83       	st	Z, r18
  k++;
 70e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 712:	8f 5f       	subi	r24, 0xFF	; 255
 714:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <k>
  return (TRUE);
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	01 c0       	rjmp	.+2      	; 0x71e <add_func+0xce>
	}
	else{
			return (FALSE);
 71c:	80 e0       	ldi	r24, 0x00	; 0
	 /*if the user enter more than the allowed tasks */
         }
}
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	08 95       	ret

0000072e <Remaining>:
*Return:void
*Description: TO CHECK  IF THE PERIOD OF THE FUNCTION LASTS OR NOT IF THE REMAINING TIME IS ZERO TASK IS EXCUTED

********************************************************/
void Remaining()
{
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	1f 92       	push	r1
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
	uint8 r=ZERO;
 738:	19 82       	std	Y+1, r1	; 0x01
	for (r=ZERO;r<k;r++)
 73a:	19 82       	std	Y+1, r1	; 0x01
 73c:	6e c0       	rjmp	.+220    	; 0x81a <Remaining+0xec>
	{
	  if(Schedular_Struct[r].Remaining_Ticks==ZERO) /*if the period of the taks end */
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	28 2f       	mov	r18, r24
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	c9 01       	movw	r24, r18
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	82 1b       	sub	r24, r18
 754:	93 0b       	sbc	r25, r19
 756:	88 59       	subi	r24, 0x98	; 152
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	fc 01       	movw	r30, r24
 75c:	80 81       	ld	r24, Z
 75e:	91 81       	ldd	r25, Z+1	; 0x01
 760:	89 2b       	or	r24, r25
 762:	b1 f5       	brne	.+108    	; 0x7d0 <Remaining+0xa2>
	  {  
	Schedular_Struct[r].Ptr2func();  /*execute the task */
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	28 2f       	mov	r18, r24
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	c9 01       	movw	r24, r18
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	82 1b       	sub	r24, r18
 77a:	93 0b       	sbc	r25, r19
 77c:	8c 59       	subi	r24, 0x9C	; 156
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	fc 01       	movw	r30, r24
 782:	80 81       	ld	r24, Z
 784:	91 81       	ldd	r25, Z+1	; 0x01
 786:	fc 01       	movw	r30, r24
 788:	09 95       	icall
	Schedular_Struct[r].Remaining_Ticks=Schedular_Struct[r].Task_Periodicty;
 78a:	89 81       	ldd	r24, Y+1	; 0x01
 78c:	28 2f       	mov	r18, r24
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	89 81       	ldd	r24, Y+1	; 0x01
 792:	48 2f       	mov	r20, r24
 794:	50 e0       	ldi	r21, 0x00	; 0
 796:	ca 01       	movw	r24, r20
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	84 1b       	sub	r24, r20
 7a6:	95 0b       	sbc	r25, r21
 7a8:	8a 59       	subi	r24, 0x9A	; 154
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	fc 01       	movw	r30, r24
 7ae:	40 81       	ld	r20, Z
 7b0:	51 81       	ldd	r21, Z+1	; 0x01
 7b2:	c9 01       	movw	r24, r18
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	82 1b       	sub	r24, r18
 7c2:	93 0b       	sbc	r25, r19
 7c4:	88 59       	subi	r24, 0x98	; 152
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	fc 01       	movw	r30, r24
 7ca:	51 83       	std	Z+1, r21	; 0x01
 7cc:	40 83       	st	Z, r20
 7ce:	22 c0       	rjmp	.+68     	; 0x814 <Remaining+0xe6>
	  }
	  else
	   {
		  Schedular_Struct[r].Remaining_Ticks--;	 /*this command indicates that ever tick the remaining time decrease by one */	  
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	28 2f       	mov	r18, r24
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	c9 01       	movw	r24, r18
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	82 1b       	sub	r24, r18
 7e6:	93 0b       	sbc	r25, r19
 7e8:	88 59       	subi	r24, 0x98	; 152
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	fc 01       	movw	r30, r24
 7ee:	80 81       	ld	r24, Z
 7f0:	91 81       	ldd	r25, Z+1	; 0x01
 7f2:	ac 01       	movw	r20, r24
 7f4:	41 50       	subi	r20, 0x01	; 1
 7f6:	51 09       	sbc	r21, r1
 7f8:	c9 01       	movw	r24, r18
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	82 1b       	sub	r24, r18
 808:	93 0b       	sbc	r25, r19
 80a:	88 59       	subi	r24, 0x98	; 152
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	fc 01       	movw	r30, r24
 810:	51 83       	std	Z+1, r21	; 0x01
 812:	40 83       	st	Z, r20

********************************************************/
void Remaining()
{
	uint8 r=ZERO;
	for (r=ZERO;r<k;r++)
 814:	89 81       	ldd	r24, Y+1	; 0x01
 816:	8f 5f       	subi	r24, 0xFF	; 255
 818:	89 83       	std	Y+1, r24	; 0x01
 81a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 81e:	99 81       	ldd	r25, Y+1	; 0x01
 820:	98 17       	cp	r25, r24
 822:	08 f4       	brcc	.+2      	; 0x826 <Remaining+0xf8>
 824:	8c cf       	rjmp	.-232    	; 0x73e <Remaining+0x10>
	  else
	   {
		  Schedular_Struct[r].Remaining_Ticks--;	 /*this command indicates that ever tick the remaining time decrease by one */	  
	   }	  	
    }
}
 826:	00 00       	nop
 828:	0f 90       	pop	r0
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <arrange_tasks>:
*Description: TO arrange tasks according to the priority order

********************************************************/ 
 
 void arrange_tasks()
 { 	 
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
 838:	29 97       	sbiw	r28, 0x09	; 9
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	de bf       	out	0x3e, r29	; 62
 840:	0f be       	out	0x3f, r0	; 63
 842:	cd bf       	out	0x3d, r28	; 61
	 uint8 r=ZERO,j=ZERO;
 844:	19 82       	std	Y+1, r1	; 0x01
 846:	1a 82       	std	Y+2, r1	; 0x02
	 struct My_struct temp;
	 for (r=ZERO;r<k;r++)
 848:	19 82       	std	Y+1, r1	; 0x01
 84a:	97 c0       	rjmp	.+302    	; 0x97a <__stack+0x11b>
	 { 
		 for (j = ZERO; j < k-r-ONE; j++)
 84c:	1a 82       	std	Y+2, r1	; 0x02
 84e:	7f c0       	rjmp	.+254    	; 0x94e <__stack+0xef>
		 {
			 if ( Schedular_Struct[j].priority >  Schedular_Struct[j+ONE].priority) /*check the priority from the user */
 850:	8a 81       	ldd	r24, Y+2	; 0x02
 852:	28 2f       	mov	r18, r24
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	c9 01       	movw	r24, r18
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	82 1b       	sub	r24, r18
 866:	93 0b       	sbc	r25, r19
 868:	86 59       	subi	r24, 0x96	; 150
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	fc 01       	movw	r30, r24
 86e:	40 81       	ld	r20, Z
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	88 2f       	mov	r24, r24
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	9c 01       	movw	r18, r24
 878:	2f 5f       	subi	r18, 0xFF	; 255
 87a:	3f 4f       	sbci	r19, 0xFF	; 255
 87c:	c9 01       	movw	r24, r18
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	82 1b       	sub	r24, r18
 88c:	93 0b       	sbc	r25, r19
 88e:	86 59       	subi	r24, 0x96	; 150
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	fc 01       	movw	r30, r24
 894:	80 81       	ld	r24, Z
 896:	84 17       	cp	r24, r20
 898:	08 f0       	brcs	.+2      	; 0x89c <__stack+0x3d>
 89a:	56 c0       	rjmp	.+172    	; 0x948 <__stack+0xe9>
			 {
				 
  /****************************Swap the tasks according to priority *********************/
				 temp = Schedular_Struct[j];
 89c:	8a 81       	ldd	r24, Y+2	; 0x02
 89e:	28 2f       	mov	r18, r24
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	c9 01       	movw	r24, r18
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	82 1b       	sub	r24, r18
 8b2:	93 0b       	sbc	r25, r19
 8b4:	8c 59       	subi	r24, 0x9C	; 156
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	27 e0       	ldi	r18, 0x07	; 7
 8ba:	fc 01       	movw	r30, r24
 8bc:	de 01       	movw	r26, r28
 8be:	13 96       	adiw	r26, 0x03	; 3
 8c0:	01 90       	ld	r0, Z+
 8c2:	0d 92       	st	X+, r0
 8c4:	2a 95       	dec	r18
 8c6:	e1 f7       	brne	.-8      	; 0x8c0 <__stack+0x61>
				 Schedular_Struct[j] =  Schedular_Struct[j+1];
 8c8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ca:	48 2f       	mov	r20, r24
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	8a 81       	ldd	r24, Y+2	; 0x02
 8d0:	88 2f       	mov	r24, r24
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	9c 01       	movw	r18, r24
 8d6:	2f 5f       	subi	r18, 0xFF	; 255
 8d8:	3f 4f       	sbci	r19, 0xFF	; 255
 8da:	ca 01       	movw	r24, r20
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	88 0f       	add	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	84 1b       	sub	r24, r20
 8ea:	95 0b       	sbc	r25, r21
 8ec:	ac 01       	movw	r20, r24
 8ee:	4c 59       	subi	r20, 0x9C	; 156
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	c9 01       	movw	r24, r18
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	88 0f       	add	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	82 1b       	sub	r24, r18
 902:	93 0b       	sbc	r25, r19
 904:	8c 59       	subi	r24, 0x9C	; 156
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	27 e0       	ldi	r18, 0x07	; 7
 90a:	fc 01       	movw	r30, r24
 90c:	da 01       	movw	r26, r20
 90e:	01 90       	ld	r0, Z+
 910:	0d 92       	st	X+, r0
 912:	2a 95       	dec	r18
 914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xaf>
				 Schedular_Struct[j+ONE]=temp;
 916:	8a 81       	ldd	r24, Y+2	; 0x02
 918:	88 2f       	mov	r24, r24
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	9c 01       	movw	r18, r24
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	c9 01       	movw	r24, r18
 924:	88 0f       	add	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	82 1b       	sub	r24, r18
 932:	93 0b       	sbc	r25, r19
 934:	8c 59       	subi	r24, 0x9C	; 156
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	27 e0       	ldi	r18, 0x07	; 7
 93a:	fe 01       	movw	r30, r28
 93c:	33 96       	adiw	r30, 0x03	; 3
 93e:	dc 01       	movw	r26, r24
 940:	01 90       	ld	r0, Z+
 942:	0d 92       	st	X+, r0
 944:	2a 95       	dec	r18
 946:	e1 f7       	brne	.-8      	; 0x940 <__stack+0xe1>
 { 	 
	 uint8 r=ZERO,j=ZERO;
	 struct My_struct temp;
	 for (r=ZERO;r<k;r++)
	 { 
		 for (j = ZERO; j < k-r-ONE; j++)
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	8f 5f       	subi	r24, 0xFF	; 255
 94c:	8a 83       	std	Y+2, r24	; 0x02
 94e:	8a 81       	ldd	r24, Y+2	; 0x02
 950:	28 2f       	mov	r18, r24
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 958:	48 2f       	mov	r20, r24
 95a:	50 e0       	ldi	r21, 0x00	; 0
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	88 2f       	mov	r24, r24
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	ba 01       	movw	r22, r20
 964:	68 1b       	sub	r22, r24
 966:	79 0b       	sbc	r23, r25
 968:	cb 01       	movw	r24, r22
 96a:	01 97       	sbiw	r24, 0x01	; 1
 96c:	28 17       	cp	r18, r24
 96e:	39 07       	cpc	r19, r25
 970:	0c f4       	brge	.+2      	; 0x974 <__stack+0x115>
 972:	6e cf       	rjmp	.-292    	; 0x850 <arrange_tasks+0x20>
 
 void arrange_tasks()
 { 	 
	 uint8 r=ZERO,j=ZERO;
	 struct My_struct temp;
	 for (r=ZERO;r<k;r++)
 974:	89 81       	ldd	r24, Y+1	; 0x01
 976:	8f 5f       	subi	r24, 0xFF	; 255
 978:	89 83       	std	Y+1, r24	; 0x01
 97a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 97e:	99 81       	ldd	r25, Y+1	; 0x01
 980:	98 17       	cp	r25, r24
 982:	08 f4       	brcc	.+2      	; 0x986 <__stack+0x127>
 984:	63 cf       	rjmp	.-314    	; 0x84c <arrange_tasks+0x1c>
				 Schedular_Struct[j] =  Schedular_Struct[j+1];
				 Schedular_Struct[j+ONE]=temp;
			 } 
		 }
	 } 
 }
 986:	00 00       	nop
 988:	29 96       	adiw	r28, 0x09	; 9
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	08 95       	ret

0000099a <scheduler_Remove_Task>:
 *Description: To remove a specific task given by the user the algorithm of remove is to remove by shifting overwriting 

 ********************************************************/
void scheduler_Remove_Task(void (*ptrf)(void))

{	
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	00 d0       	rcall	.+0      	; 0x9a0 <scheduler_Remove_Task+0x6>
 9a0:	1f 92       	push	r1
 9a2:	cd b7       	in	r28, 0x3d	; 61
 9a4:	de b7       	in	r29, 0x3e	; 62
 9a6:	9b 83       	std	Y+3, r25	; 0x03
 9a8:	8a 83       	std	Y+2, r24	; 0x02
 uint8 r=ZERO; 	
 9aa:	19 82       	std	Y+1, r1	; 0x01
 for (r=ZERO;r<k;r++)
 9ac:	19 82       	std	Y+1, r1	; 0x01
 9ae:	1d c0       	rjmp	.+58     	; 0x9ea <scheduler_Remove_Task+0x50>
    {
		 if ( Schedular_Struct[r].Ptr2func == ptrf)
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	28 2f       	mov	r18, r24
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	c9 01       	movw	r24, r18
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	88 0f       	add	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	82 1b       	sub	r24, r18
 9c6:	93 0b       	sbc	r25, r19
 9c8:	8c 59       	subi	r24, 0x9C	; 156
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	fc 01       	movw	r30, r24
 9ce:	20 81       	ld	r18, Z
 9d0:	31 81       	ldd	r19, Z+1	; 0x01
 9d2:	8a 81       	ldd	r24, Y+2	; 0x02
 9d4:	9b 81       	ldd	r25, Y+3	; 0x03
 9d6:	28 17       	cp	r18, r24
 9d8:	39 07       	cpc	r19, r25
 9da:	21 f4       	brne	.+8      	; 0x9e4 <scheduler_Remove_Task+0x4a>
		 {
			 remo=r;  /*get the index of the task required to remove */
 9dc:	89 81       	ldd	r24, Y+1	; 0x01
 9de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			 break;	 /*break when found the task required to remove*/
 9e2:	08 c0       	rjmp	.+16     	; 0x9f4 <scheduler_Remove_Task+0x5a>
 ********************************************************/
void scheduler_Remove_Task(void (*ptrf)(void))

{	
 uint8 r=ZERO; 	
 for (r=ZERO;r<k;r++)
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	8f 5f       	subi	r24, 0xFF	; 255
 9e8:	89 83       	std	Y+1, r24	; 0x01
 9ea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 9ee:	99 81       	ldd	r25, Y+1	; 0x01
 9f0:	98 17       	cp	r25, r24
 9f2:	f0 f2       	brcs	.-68     	; 0x9b0 <scheduler_Remove_Task+0x16>
		 {
			 remo=r;  /*get the index of the task required to remove */
			 break;	 /*break when found the task required to remove*/
		 }
	 }
	if (remo!=Negative_One)  /*check that the function that user enter to remove is already exist or to check that function call remove or not */
 9f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 9f8:	8f 3f       	cpi	r24, 0xFF	; 255
 9fa:	b1 f1       	breq	.+108    	; 0xa68 <scheduler_Remove_Task+0xce>
	{
			for (r=remo;r<k;r++)
 9fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 a00:	89 83       	std	Y+1, r24	; 0x01
 a02:	28 c0       	rjmp	.+80     	; 0xa54 <scheduler_Remove_Task+0xba>
	        {
		Schedular_Struct[r].Ptr2func=Schedular_Struct[r+ONE].Ptr2func; /*shifting and overwriting */
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	28 2f       	mov	r18, r24
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	89 81       	ldd	r24, Y+1	; 0x01
 a0c:	88 2f       	mov	r24, r24
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	ac 01       	movw	r20, r24
 a12:	4f 5f       	subi	r20, 0xFF	; 255
 a14:	5f 4f       	sbci	r21, 0xFF	; 255
 a16:	ca 01       	movw	r24, r20
 a18:	88 0f       	add	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	88 0f       	add	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	88 0f       	add	r24, r24
 a22:	99 1f       	adc	r25, r25
 a24:	84 1b       	sub	r24, r20
 a26:	95 0b       	sbc	r25, r21
 a28:	8c 59       	subi	r24, 0x9C	; 156
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	fc 01       	movw	r30, r24
 a2e:	40 81       	ld	r20, Z
 a30:	51 81       	ldd	r21, Z+1	; 0x01
 a32:	c9 01       	movw	r24, r18
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	88 0f       	add	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	88 0f       	add	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	82 1b       	sub	r24, r18
 a42:	93 0b       	sbc	r25, r19
 a44:	8c 59       	subi	r24, 0x9C	; 156
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	fc 01       	movw	r30, r24
 a4a:	51 83       	std	Z+1, r21	; 0x01
 a4c:	40 83       	st	Z, r20
			 break;	 /*break when found the task required to remove*/
		 }
	 }
	if (remo!=Negative_One)  /*check that the function that user enter to remove is already exist or to check that function call remove or not */
	{
			for (r=remo;r<k;r++)
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	8f 5f       	subi	r24, 0xFF	; 255
 a52:	89 83       	std	Y+1, r24	; 0x01
 a54:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 a58:	99 81       	ldd	r25, Y+1	; 0x01
 a5a:	98 17       	cp	r25, r24
 a5c:	98 f2       	brcs	.-90     	; 0xa04 <scheduler_Remove_Task+0x6a>
	        {
		Schedular_Struct[r].Ptr2func=Schedular_Struct[r+ONE].Ptr2func; /*shifting and overwriting */
	        }	
	k--;  /*global index indicating maximum tasks you can call */
 a5e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <k>
 a62:	81 50       	subi	r24, 0x01	; 1
 a64:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <k>
    }
	
 a68:	00 00       	nop
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	08 95       	ret

00000a76 <LED_ONE>:
 */ 
#include "../INCLUDE/tasks.h "
#include "../INCLUDE/Dio.h "

void LED_ONE()
{	
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
DIO_WritePin(LEd1,HIGH);
 a7e:	61 e0       	ldi	r22, 0x01	; 1
 a80:	8c e0       	ldi	r24, 0x0C	; 12
 a82:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
DIO_WritePin(LEd2,LOW);
 a86:	60 e0       	ldi	r22, 0x00	; 0
 a88:	8d e0       	ldi	r24, 0x0D	; 13
 a8a:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
DIO_WritePin(LEd3,LOW);
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	8e e0       	ldi	r24, 0x0E	; 14
 a92:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>


}
 a96:	00 00       	nop
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	08 95       	ret

00000a9e <LED_TWO>:
void LED_TWO()
{
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62

	DIO_WritePin(LEd2,HIGH);
 aa6:	61 e0       	ldi	r22, 0x01	; 1
 aa8:	8d e0       	ldi	r24, 0x0D	; 13
 aaa:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
	DIO_WritePin(LEd3,LOW);
 aae:	60 e0       	ldi	r22, 0x00	; 0
 ab0:	8e e0       	ldi	r24, 0x0E	; 14
 ab2:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
	DIO_WritePin(LEd1,LOW);
 ab6:	60 e0       	ldi	r22, 0x00	; 0
 ab8:	8c e0       	ldi	r24, 0x0C	; 12
 aba:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
}
 abe:	00 00       	nop
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	08 95       	ret

00000ac6 <LED_THREE>:
void LED_THREE()
{
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	cd b7       	in	r28, 0x3d	; 61
 acc:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LEd3,HIGH);
 ace:	61 e0       	ldi	r22, 0x01	; 1
 ad0:	8e e0       	ldi	r24, 0x0E	; 14
 ad2:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
	DIO_WritePin(LEd2,LOW);
 ad6:	60 e0       	ldi	r22, 0x00	; 0
 ad8:	8d e0       	ldi	r24, 0x0D	; 13
 ada:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
	DIO_WritePin(LEd1,LOW);
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	8c e0       	ldi	r24, 0x0C	; 12
 ae2:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_WritePin>
}
 ae6:	00 00       	nop
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	08 95       	ret

00000aee <BUTTON_CHECK>:

void BUTTON_CHECK()
{
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
	if (DIO_ReadPin(10))
 af6:	8a e0       	ldi	r24, 0x0A	; 10
 af8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_ReadPin>
 afc:	88 23       	and	r24, r24
 afe:	21 f0       	breq	.+8      	; 0xb08 <BUTTON_CHECK+0x1a>
	{
	 scheduler_Remove_Task(LED_THREE);
 b00:	83 e6       	ldi	r24, 0x63	; 99
 b02:	95 e0       	ldi	r25, 0x05	; 5
 b04:	0e 94 cd 04 	call	0x99a	; 0x99a <scheduler_Remove_Task>
	}
}
 b08:	00 00       	nop
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	08 95       	ret

00000b10 <__vector_10>:
   *Return:void
   *Description: to CALL CALL BACK FUNCTION 

   ********************************************************/
ISR(TIMER0_COMP_vect)
{
 b10:	1f 92       	push	r1
 b12:	0f 92       	push	r0
 b14:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b18:	0f 92       	push	r0
 b1a:	11 24       	eor	r1, r1
 b1c:	2f 93       	push	r18
 b1e:	3f 93       	push	r19
 b20:	4f 93       	push	r20
 b22:	5f 93       	push	r21
 b24:	6f 93       	push	r22
 b26:	7f 93       	push	r23
 b28:	8f 93       	push	r24
 b2a:	9f 93       	push	r25
 b2c:	af 93       	push	r26
 b2e:	bf 93       	push	r27
 b30:	ef 93       	push	r30
 b32:	ff 93       	push	r31
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62
	(*callback)();	
 b3c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <callback>
 b40:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <callback+0x1>
 b44:	fc 01       	movw	r30, r24
 b46:	09 95       	icall
}
 b48:	00 00       	nop
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	ff 91       	pop	r31
 b50:	ef 91       	pop	r30
 b52:	bf 91       	pop	r27
 b54:	af 91       	pop	r26
 b56:	9f 91       	pop	r25
 b58:	8f 91       	pop	r24
 b5a:	7f 91       	pop	r23
 b5c:	6f 91       	pop	r22
 b5e:	5f 91       	pop	r21
 b60:	4f 91       	pop	r20
 b62:	3f 91       	pop	r19
 b64:	2f 91       	pop	r18
 b66:	0f 90       	pop	r0
 b68:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b6c:	0f 90       	pop	r0
 b6e:	1f 90       	pop	r1
 b70:	18 95       	reti

00000b72 <timer0_init>:
of timer interrupt to Enable global interrupt and timer , configure prescaler
,enable external interrupt and determine whether working on falling or rising edge


********************************************************/
void timer0_init(){
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
 b76:	cd b7       	in	r28, 0x3d	; 61
 b78:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,7); /* to set the global flag*/
 b7a:	8f e5       	ldi	r24, 0x5F	; 95
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	2f e5       	ldi	r18, 0x5F	; 95
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	f9 01       	movw	r30, r18
 b84:	20 81       	ld	r18, Z
 b86:	20 68       	ori	r18, 0x80	; 128
 b88:	fc 01       	movw	r30, r24
 b8a:	20 83       	st	Z, r18
	OCR0 = OCR_VALUE; /* to assign ocr value */
 b8c:	8c e5       	ldi	r24, 0x5C	; 92
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	2c e7       	ldi	r18, 0x7C	; 124
 b92:	fc 01       	movw	r30, r24
 b94:	20 83       	st	Z, r18
	Set_Bit(TIMSK,OCIE0); 
 b96:	89 e5       	ldi	r24, 0x59	; 89
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	29 e5       	ldi	r18, 0x59	; 89
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	f9 01       	movw	r30, r18
 ba0:	20 81       	ld	r18, Z
 ba2:	22 60       	ori	r18, 0x02	; 2
 ba4:	fc 01       	movw	r30, r24
 ba6:	20 83       	st	Z, r18
	/*choose prescale 64 and CTC mode */
	Set_Bit(TCCR0,WGM01);
 ba8:	83 e5       	ldi	r24, 0x53	; 83
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	23 e5       	ldi	r18, 0x53	; 83
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	f9 01       	movw	r30, r18
 bb2:	20 81       	ld	r18, Z
 bb4:	28 60       	ori	r18, 0x08	; 8
 bb6:	fc 01       	movw	r30, r24
 bb8:	20 83       	st	Z, r18
	Set_Bit(TCCR0,CS01);
 bba:	83 e5       	ldi	r24, 0x53	; 83
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	23 e5       	ldi	r18, 0x53	; 83
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	f9 01       	movw	r30, r18
 bc4:	20 81       	ld	r18, Z
 bc6:	22 60       	ori	r18, 0x02	; 2
 bc8:	fc 01       	movw	r30, r24
 bca:	20 83       	st	Z, r18
	Set_Bit(TCCR0,CS00);
 bcc:	83 e5       	ldi	r24, 0x53	; 83
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	23 e5       	ldi	r18, 0x53	; 83
 bd2:	30 e0       	ldi	r19, 0x00	; 0
 bd4:	f9 01       	movw	r30, r18
 bd6:	20 81       	ld	r18, Z
 bd8:	21 60       	ori	r18, 0x01	; 1
 bda:	fc 01       	movw	r30, r24
 bdc:	20 83       	st	Z, r18
	Set_Bit(SREG,GlOBAL_INTERRUPT_BIT);
 bde:	8f e5       	ldi	r24, 0x5F	; 95
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	2f e5       	ldi	r18, 0x5F	; 95
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	f9 01       	movw	r30, r18
 be8:	20 81       	ld	r18, Z
 bea:	20 68       	ori	r18, 0x80	; 128
 bec:	fc 01       	movw	r30, r24
 bee:	20 83       	st	Z, r18
}
 bf0:	00 00       	nop
 bf2:	df 91       	pop	r29
 bf4:	cf 91       	pop	r28
 bf6:	08 95       	ret

00000bf8 <Set_CallBack>:
*Description: TO ASSIGN THE CALLBACK FUNCTION THAT EXECUTED BY ISR

********************************************************/
void  Set_CallBack( void (*call)(void))

{
 bf8:	cf 93       	push	r28
 bfa:	df 93       	push	r29
 bfc:	00 d0       	rcall	.+0      	; 0xbfe <Set_CallBack+0x6>
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62
 c02:	9a 83       	std	Y+2, r25	; 0x02
 c04:	89 83       	std	Y+1, r24	; 0x01
  callback = call;   /*call is sent form the os layer */
 c06:	89 81       	ldd	r24, Y+1	; 0x01
 c08:	9a 81       	ldd	r25, Y+2	; 0x02
 c0a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <callback+0x1>
 c0e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <callback>
 c12:	00 00       	nop
 c14:	0f 90       	pop	r0
 c16:	0f 90       	pop	r0
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	08 95       	ret

00000c1e <_exit>:
 c1e:	f8 94       	cli

00000c20 <__stop_program>:
 c20:	ff cf       	rjmp	.-2      	; 0xc20 <__stop_program>
